// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tables.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Table {

  /// <summary>Holder for reflection information generated from tables.proto</summary>
  public static partial class TablesReflection {

    #region Descriptor
    /// <summary>File descriptor for tables.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TablesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx0YWJsZXMucHJvdG8SBVRhYmxlIjIKBkFpSW5mbxIKCgJpZBgBIAEoBRIM",
            "CgRwYXRoGAIgASgJEg4KBnJlbWFyaxgDIAEoCSIlCglBdWRpb0luZm8SCgoC",
            "aWQYASABKAUSDAoEcGF0aBgCIAEoCSLXAQoQQmFzZVByb3BlcnR5SW5mbxIK",
            "CgJpZBgBIAEoCRIOCgZyZW1hcmsYAiABKAkSDAoEamluZxgDIAEoAhIKCgJx",
            "aRgEIAEoAhIMCgRzaGVuGAUgASgCEgoKAnd1GAYgASgCEgwKBGZhbmcYByAB",
            "KAISCgoCc3UYCCABKAISCwoDeXVuGAkgASgCEgwKBHNodWkYCiABKAISCwoD",
            "aHVvGAsgASgCEgsKA2xlaRgMIAEoAhIMCgRmZW5nGA0gASgCEgoKAnR1GA4g",
            "ASgCEgoKAm1vGA8gASgCIrwCChBCYXR0bGVBY3Rpb25JbmZvEgoKAmlkGAEg",
            "ASgJEg4KBnJlbWFyaxgCIAEoCRINCgVpc0FuZBgDIAEoBRIVCg1yZXF1aXJl",
            "QWN0aW9uGAQgASgJEhQKDHJlc3VsdEFjdGlvbhgFIAEoCRITCgthY3Rpb25E",
            "ZWxheRgGIAEoCRIMCgR0eXBlGAcgASgJEhYKDmFjdGlvblBvc2l0aW9uGAgg",
            "ASgJEg4KBmlzU2hvdxgJIAEoBRINCgVpc0VuZBgKIAEoBRITCgtwZXJPZkhl",
            "YWx0aBgLIAEoBRIRCgltb25zdGVySWQYDCABKAkSEQoJbW9uc3RlckFpGA0g",
            "ASgJEhQKDG1vbnN0ZXJDb3VudBgOIAEoBRITCgttb25zdGVyVHlwZRgPIAEo",
            "CRIQCghkaWFsb2dJZBgQIAEoCSLmAQoPQmF0dGxlTGV2ZWxJbmZvEgoKAmlk",
            "GAEgASgJEhQKDGJhdHRsZUFjdGlvbhgCIAEoCRITCgtsZXZlbFByZWZhYhgD",
            "IAEoCRIMCgRib3JuGAQgASgJEhEKCWJnTXVzaWNJZBgFIAEoBRIRCglzY2Vu",
            "ZU1vZGUYBiABKAUSEQoJbGV2ZWxOYW1lGAcgASgJEhEKCXNjZW5lTmFtZRgI",
            "IAEoCRIVCg1zY2VuZVByb3BlcnR5GAkgASgFEhUKDWxldmVsQ29zdEl0ZW0Y",
            "CiADKAkSFAoMbGV2ZWxHZXRJdGVtGAsgAygJIngKDERpYWxvZ3VlSW5mbxIK",
            "CgJpZBgBIAEoCRIOCgZuZXh0SWQYAiABKAkSDAoEbmFtZRgDIAEoCRIMCgRo",
            "ZWFkGAQgASgJEg0KBWF1ZGlvGAUgASgJEhAKCGR1cmF0aW9uGAYgASgCEg8K",
            "B2NvbnRlbnQYByABKAkiVwoIRFRvREluZm8SCgoCaWQYASABKAUSDgoGbWF4",
            "RXhwGAIgASgFEg8KB21heEppbmcYAyABKAkSDQoFbWF4UWkYBCABKAkSDwoH",
            "bWF4U2hlbhgFIAEoCSKwDgoJRXF1aXBJbmZvEgoKAmlkGAEgASgJEgwKBG5h",
            "bWUYAiABKAkSEQoJc2hvd0luQmFnGAMgASgFEgwKBHR5cGUYBCABKAUSEQoJ",
            "cHJpdmF0ZUlkGAUgASgJEgwKBGljb24YBiABKAkSDwoHcXVhbGl0eRgHIAEo",
            "BRIWCg5iYXNlUHJvcGVydHlJZBgIIAEoCRIOCgZyZW1hcmsYCSABKAkSCwoD",
            "YnV5GAogASgJEgwKBHNlbGwYCyABKAkSDQoFc3BsaXQYDCABKAkSEQoJc3Bs",
            "aXROZWVkGA0gASgJEg0KBW1lcmdlGA4gASgJEhEKCW1lcmdlTmVlZBgPIAEo",
            "CRIUCgxJdGVtX01vZGVsSUQYECABKAkSFAoMSXRlbV9JbWFnZUlEGBEgASgJ",
            "EhEKCUl0ZW1fVHlwZRgSIAEoBRIUCgxJdGVtX1R5cGVWYWwYEyABKAUSFQoN",
            "SXRlbV9Vc2VSYW5nZRgUIAEoBRIVCg1JdGVtX1VzZVBsYWNlGBUgASgFEhkK",
            "EUl0ZW1fVXNlX0ppbmdUaWFuGBYgASgFEhgKEEl0ZW1fVXNlX1h1ZUppYW4Y",
            "FyABKAUSGgoSSXRlbV9Vc2VfQ2hhbmdRaW5nGBggASgFEhgKEEl0ZW1fVXNl",
            "X0xvbmdLdWkYGSABKAUSFwoPSXRlbV9Vc2VfWmlYdWFuGBogASgFEhQKDEl0",
            "ZW1fT2xkX1ZhbBgbIAEoBRISCgpJdGVtX1ByaWNlGBwgASgFEhQKDEl0ZW1f",
            "QXR0U2h1aRgdIAEoBRITCgtJdGVtX0F0dEh1bxgeIAEoBRIUCgxJdGVtX0F0",
            "dEZlbmcYHyABKAUSEwoLSXRlbV9BdHRMZWkYICABKAUSEgoKSXRlbV9BdHRU",
            "dRghIAEoBRIUCgxJdGVtX1NwZWNpYWwYIiABKAUSGAoQSXRlbV9FZmZlY3Rf",
            "U2h1aRgjIAEoCRIXCg9JdGVtX0VmZmVjdF9IdW8YJCABKAkSGAoQSXRlbV9F",
            "ZmZlY3RfRmVuZxglIAEoCRIXCg9JdGVtX0VmZmVjdF9MZWkYJiABKAkSFgoO",
            "SXRlbV9FZmZlY3RfVHUYJyABKAkSGAoQSXRlbV9FZmZlY3RfSmluZxgoIAEo",
            "CRIWCg5JdGVtX0VmZmVjdF9RaRgpIAEoCRIYChBJdGVtX0VmZmVjdF9TaGVu",
            "GCogASgJEhYKDkl0ZW1fRWZmZWN0X1d1GCsgASgJEhgKEEl0ZW1fRWZmZWN0",
            "X0ZhbmcYLCABKAkSFgoOSXRlbV9FZmZlY3RfU3UYLSABKAkSFwoPSXRlbV9F",
            "ZmZlY3RfWXVuGC4gASgJEhMKC0l0ZW1fU2h1aUR1GC8gASgJEhIKCkl0ZW1f",
            "SHVvRHUYMCABKAkSEwoLSXRlbV9GZW5nRHUYMSABKAkSEgoKSXRlbV9MZWlE",
            "dRgyIAEoCRIRCglJdGVtX1R1RHUYMyABKAkSEQoJSXRlbV9EaW5nGDQgASgJ",
            "EhEKCUl0ZW1fRmVuZxg1IAEoCRIQCghJdGVtX0ppbhg2IAEoCRIRCglJdGVt",
            "X01pYW4YNyABKAkSEQoJSXRlbV9MdWFuGDggASgJEhIKCkl0ZW1fS3VhbmcY",
            "OSABKAkSEQoJSXRlbV9KaW5nGDogASgJEg8KB0l0ZW1fQmkYOyABKAkSEAoI",
            "SXRlbV9KaWUYPCABKAkSEAoISXRlbV9ZaW4YPSABKAkSEgoKSXRlbV9XdUFk",
            "ZBg+IAEoCRISCgpJdGVtX1d1U3ViGD8gASgJEhQKDEl0ZW1fRmFuZ0FkZBhA",
            "IAEoCRIUCgxJdGVtX0ZhbmdTdWIYQSABKAkSEgoKSXRlbV9TdUFkZBhCIAEo",
            "CRISCgpJdGVtX1N1U3ViGEMgASgJEhMKC0l0ZW1fWXVuQWRkGEQgASgJEhMK",
            "C0l0ZW1fWXVuU3ViGEUgASgJEhIKCkl0ZW1fUGluU2kYRiABKAkSEwoLSXRl",
            "bV9TaVdhbmcYRyABKAkSEQoJSXRlbV9CaUR1GEggASgJEhIKCkl0ZW1fQmlY",
            "aWUYSSABKAkSEgoKSXRlbV9UdWlNbxhKIAEoCRIUCgxJdGVtX1NoZW5ZYW4Y",
            "SyABKAkSFAoMSXRlbV9KaW5nSmluGEwgASgJEhEKCUl0ZW1fTGlhbhhNIAEo",
            "BRISCgpJdGVtX0Jhb0ppGE4gASgFEhEKCUl0ZW1fVGVKaRhPIAEoBRISCgpJ",
            "dGVtX1FpU3ViGFAgASgFEhQKDEl0ZW1fU2hlblN1YhhRIAEoBRIYChBJdGVt",
            "X0NvbXBvc2VJRF8xGFIgASgFEhgKEEl0ZW1fQ29tcG9zZUlEXzIYUyABKAUS",
            "GwoTSXRlbV9Db21wb3NlX1Byb3BJRBhUIAEoBRIUCgxJdGVtX1N0b25lSUQY",
            "VSABKAUSGAoQSXRlbV9TbWVsdFByb3BJRBhWIAEoBRIXCg9JdGVtX1NtZWx0",
            "UHJpY2UYVyABKAUiNAoGRnhJbmZvEgoKAmlkGAEgASgFEgwKBHBhdGgYAiAB",
            "KAkSEAoIYmluZFBhdGgYAyABKAkieQoJR3VpZGVJbmZvEgoKAmlkGAEgASgJ",
            "EhgKEHRyaWdnZXJDb25kaXRpb24YAiABKAUSDAoEcGF0aBgDIAEoCRIOCgZw",
            "YXJlbnQYBCABKAUSEQoJZGVsYXlUaW1lGAUgASgCEhUKDXRyaWdnZXJSYWRp",
            "dXMYBiABKAUiugEKCEhlcm9JbmZvEgoKAmlkGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSEgoKc2luZ2xlTmFtZRgDIAEoCRISCgpwcmVmYWJQYXRoGAQgASgJEg4K",
            "BnNraWxscxgFIAEoCRIPCgd1c2VUeXBlGAYgASgFEhMKC2RlZmF1bHRPcGVu",
            "GAcgASgFEhAKCG9wZW5OZWVkGAggASgJEhYKDmJhc2VQcm9wZXJ0eUlkGAkg",
            "ASgJEgwKBHN0YXIYCiABKAUiQgoISG9zdEluZm8SCgoCaWQYASABKAUSDgoG",
            "cmVtYXJrGAIgASgJEgsKA2tleRgDIAEoCRINCgV2YWx1ZRgEIAEoCSKvAgoI",
            "SXRlbUluZm8SCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIRCglzaG93SW5C",
            "YWcYAyABKAUSDAoEdHlwZRgEIAEoBRIRCglwcml2YXRlSWQYBSABKAUSDAoE",
            "aWNvbhgGIAEoCRIPCgdxdWFsaXR5GAcgASgFEhYKDmJhc2VQcm9wZXJ0eUlk",
            "GAggASgJEg4KBnJlbWFyaxgJIAEoCRILCgNudW0YCiABKAUSCwoDYnV5GAsg",
            "ASgJEgwKBHNlbGwYDCABKAkSDQoFc3BsaXQYDSABKAkSEQoJc3BsaXROZWVk",
            "GA4gASgJEg0KBW1lcmdlGA8gASgJEhEKCW1lcmdlTmVlZBgQIAEoCRIOCgZn",
            "ZXRXYXkYESABKAkSEgoKZ2V0V2F5RGVzYxgSIAEoCSIoCgxMYW5ndWFnZUlu",
            "Zm8SCgoCaWQYASABKAUSDAoEbW9ubxgCIAEoCSItChFMb2NhbExhbmd1YWdl",
            "SW5mbxIKCgJpZBgBIAEoBRIMCgRtb25vGAIgASgJIkIKCE1pc2NJbmZvEgoK",
            "AmlkGAEgASgFEg4KBnJlbWFyaxgCIAEoCRILCgNrZXkYAyABKAkSDQoFdmFs",
            "dWUYBCABKAkiRAoJTW9kZWxJbmZvEgoKAmlkGAEgASgFEg0KBW1UeXBlGAIg",
            "ASgJEg0KBW1QYXRoGAMgASgJEg0KBW1OYW1lGAQgASgJIkkKCU1vdmllSW5m",
            "bxIKCgJpZBgBIAEoBRIMCgRwYXRoGAIgASgJEhEKCWV4dGVuc2lvbhgDIAEo",
            "CRIPCgdkdXJ0aW9uGAQgASgFIksKEE9wZW5GdW5jdGlvbkluZm8SCgoCaWQY",
            "ASABKAkSDQoFbGV2ZWwYAiABKAUSDAoEbmFtZRgDIAEoCRIOCgZyZW1hcmsY",
            "BCABKAkibAoNU2hvcEdvb2RzSW5mbxIKCgJpZBgBIAEoCRIOCgZyZW1hcmsY",
            "AiABKAkSDAoEdHlwZRgDIAEoBRIQCghpdGVtSW5mbxgEIAEoCRIPCgdzaG93",
            "TnVtGAUgASgFEg4KBmNvc3RJZBgGIAEoCSJnCghTaG9wSW5mbxIKCgJpZBgB",
            "IAEoCRIOCgZyZW1hcmsYAiABKAkSDAoEdHlwZRgDIAEoBRIQCghpdGVtSW5m",
            "bxgEIAEoCRIPCgdzaG93TnVtGAUgASgFEg4KBmNvc3RJZBgGIAEoCSLXDwoJ",
            "U2tpbGxJbmZvEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSDgoGcmVtYXJr",
            "GAMgASgJEgwKBGljb24YBCABKAkSEQoJcHJpdmF0ZUlkGAUgASgJEgwKBHR5",
            "cGUYBiABKAUSDgoGb3BlbkJ5GAcgASgFEhYKDmJhc2VQcm9wZXJ0eUlkGAgg",
            "ASgJEhUKDVNraWxsX0F0dFNodWkYCSABKAkSFAoMU2tpbGxfQXR0SHVvGAog",
            "ASgJEhUKDVNraWxsX0F0dEZlbmcYCyABKAkSFAoMU2tpbGxfQXR0TGVpGAwg",
            "ASgJEhMKC1NraWxsX0F0dFR1GA0gASgJEhIKClNraWxsX1R5cGUYDiABKAUS",
            "FQoNVXNlcl9KaW5nVGlhbhgPIAEoCRIUCgxVc2VyX1h1ZUppYW4YECABKAkS",
            "FgoOVXNlcl9DaGFuZ1FpbmcYESABKAkSFAoMVXNlcl9Mb25nS3VpGBIgASgJ",
            "EhMKC1VzZXJfWmlYdWFuGBMgASgJEhYKDlNraWxsX1VzZVJhbmdlGBQgASgJ",
            "EhgKEFNraWxsX0NvbnN1bWVfUWkYFSABKAkSGgoSU2tpbGxfQ29uc3VtZV9T",
            "aGVuGBYgASgJEh0KFVNraWxsX1NwZWNpYWxfQ29uc3VtZRgXIAEoCRIiChpT",
            "a2lsbF9TcGVjaWFsX0NvbnN1bWVWYWx1ZRgYIAEoCRIbChNTa2lsbF9TcGVj",
            "aWFsX1N0YXRlGBkgASgJEhYKDlNraWxsX1VzZV9PZGRzGBogASgJEhQKDFNr",
            "aWxsX1NodWlEdRgbIAEoCRITCgtTa2lsbF9IdW9EdRgcIAEoCRIUCgxTa2ls",
            "bF9GZW5nRHUYHSABKAkSEwoLU2tpbGxfTGVpRHUYHiABKAkSEgoKU2tpbGxf",
            "VHVEdRgfIAEoCRISCgpTa2lsbF9EaW5nGCAgASgJEhIKClNraWxsX0ZlbmcY",
            "ISABKAkSEQoJU2tpbGxfSmluGCIgASgJEhIKClNraWxsX01pYW4YIyABKAkS",
            "EgoKU2tpbGxfTHVhbhgkIAEoCRITCgtTa2lsbF9LdWFuZxglIAEoCRISCgpT",
            "a2lsbF9KaW5nGCYgASgJEhAKCFNraWxsX0JpGCcgASgJEhEKCVNraWxsX0pp",
            "ZRgoIAEoCRIRCglTa2lsbF9ZaW4YKSABKAkSEwoLU2tpbGxfUGluU2kYKiAB",
            "KAkSFAoMU2tpbGxfU2lXYW5nGCsgASgJEhIKClNraWxsX0JpRHUYLCABKAkS",
            "EwoLU2tpbGxfV3VBZGQYLSABKAkSEwoLU2tpbGxfV3VTdWIYLiABKAkSFQoN",
            "U2tpbGxfRmFuZ0FkZBgvIAEoCRIVCg1Ta2lsbF9GYW5nU3ViGDAgASgJEhMK",
            "C1NraWxsX1N1QWRkGDEgASgJEhMKC1NraWxsX1N1U3ViGDIgASgJEhQKDFNr",
            "aWxsX1l1bkFkZBgzIAEoCRIUCgxTa2lsbF9ZdW5TdWIYNCABKAkSGQoRU2tp",
            "bGxfRWZmZWN0X0ppbmcYNSABKAkSFwoPU2tpbGxfRWZmZWN0X1FpGDYgASgJ",
            "EhkKEVNraWxsX0VmZmVjdF9TaGVuGDcgASgJEhcKD1NraWxsX0VmZmVjdF9X",
            "dRg4IAEoCRIZChFTa2lsbF9FZmZlY3RfRmFuZxg5IAEoCRIXCg9Ta2lsbF9F",
            "ZmZlY3RfU3UYOiABKAkSGAoQU2tpbGxfRWZmZWN0X1l1bhg7IAEoCRIZChFT",
            "a2lsbF9FZmZlY3RfU2h1aRg8IAEoCRIYChBTa2lsbF9FZmZlY3RfSHVvGD0g",
            "ASgJEhkKEVNraWxsX0VmZmVjdF9GZW5nGD4gASgJEhgKEFNraWxsX0VmZmVj",
            "dF9MZWkYPyABKAkSFwoPU2tpbGxfRWZmZWN0X1R1GEAgASgJEhwKFFNraWxs",
            "X0xldmVsMV9OZWVkTnVtGEEgASgJEhwKFFNraWxsX0xldmVsMl9OZWVkTnVt",
            "GEIgASgJEhwKFFNraWxsX0xldmVsM19OZWVkTnVtGEMgASgJEhwKFFNraWxs",
            "X0xldmVsNF9OZWVkTnVtGEQgASgJEhQKDFNraWxsX0FuZElEMRhFIAEoCRIU",
            "CgxTa2lsbF9BbmRJRDIYRiABKAkSFAoMU2tpbGxfQW5kSUQzGEcgASgJEhcK",
            "D1NraWxsX0FuZExldmVsMRhIIAEoCRIXCg9Ta2lsbF9BbmRMZXZlbDIYSSAB",
            "KAkSFwoPU2tpbGxfQW5kTGV2ZWwzGEogASgJEhkKEVNraWxsX0NvbWJvTGV2",
            "ZWwxGEsgASgJEhkKEVNraWxsX0NvbWJvTGV2ZWwyGEwgASgJEhkKEVNraWxs",
            "X0NvbWJvTGV2ZWwzGE0gASgJEhQKDFNraWxsX01hbkx2MRhOIAEoCRIUCgxT",
            "a2lsbF9NYW5MdjIYTyABKAkSFAoMU2tpbGxfTWFuTHYzGFAgASgJEhYKDlNr",
            "aWxsX0NvbWJvSUQxGFEgASgJEhYKDlNraWxsX0NvbWJvSUQyGFIgASgJEhYK",
            "DlNraWxsX0NvbWJvSUQzGFMgASgJEhUKDVNraWxsX0FkZEx2SUQYVCABKAkS",
            "FwoPU2tpbGxfQWRkUm9sZUx2GFUgASgJEhQKDFNraWxsX05lZWRMdhhWIAEo",
            "CRIWCg5Ta2lsbF9Jc1VzZUFsbBhXIAEoCSLUAQoIVGFza0luZm8SCgoCaWQY",
            "ASABKAkSDgoGbmV4dElkGAIgASgFEhAKCHRhc2tUeXBlGAMgASgFEhAKCHRh",
            "c2tOYW1lGAQgASgJEhAKCHRhc2tJY29uGAUgASgJEhAKCHRhc2tEZXNjGAYg",
            "ASgJEhQKDHRhc2tDb3N0SXRlbRgHIAEoCRITCgt0YXNrR2V0SXRlbRgIIAEo",
            "CRIRCgl0YXNrTWFwSWQYCSABKAUSEwoLdGFza05wY1RhbGsYCiABKAkSEQoJ",
            "dGFza05wY0lkGAsgASgFIrIHCgZ0YWJsZXMSHgoHQWlUYWJsZRgBIAMoCzIN",
            "LlRhYmxlLkFpSW5mbxIkCgpBdWRpb1RhYmxlGAIgAygLMhAuVGFibGUuQXVk",
            "aW9JbmZvEjIKEUJhc2VQcm9wZXJ0eVRhYmxlGAMgAygLMhcuVGFibGUuQmFz",
            "ZVByb3BlcnR5SW5mbxIyChFCYXR0bGVBY3Rpb25UYWJsZRgEIAMoCzIXLlRh",
            "YmxlLkJhdHRsZUFjdGlvbkluZm8SMAoQQmF0dGxlTGV2ZWxUYWJsZRgFIAMo",
            "CzIWLlRhYmxlLkJhdHRsZUxldmVsSW5mbxIqCg1EaWFsb2d1ZVRhYmxlGAYg",
            "AygLMhMuVGFibGUuRGlhbG9ndWVJbmZvEiIKCURUb0RUYWJsZRgHIAMoCzIP",
            "LlRhYmxlLkRUb0RJbmZvEiQKCkVxdWlwVGFibGUYCCADKAsyEC5UYWJsZS5F",
            "cXVpcEluZm8SHgoHRnhUYWJsZRgJIAMoCzINLlRhYmxlLkZ4SW5mbxIkCgpH",
            "dWlkZVRhYmxlGAogAygLMhAuVGFibGUuR3VpZGVJbmZvEiIKCUhlcm9UYWJs",
            "ZRgLIAMoCzIPLlRhYmxlLkhlcm9JbmZvEiIKCUhvc3RUYWJsZRgMIAMoCzIP",
            "LlRhYmxlLkhvc3RJbmZvEiIKCUl0ZW1UYWJsZRgNIAMoCzIPLlRhYmxlLkl0",
            "ZW1JbmZvEioKDUxhbmd1YWdlVGFibGUYDiADKAsyEy5UYWJsZS5MYW5ndWFn",
            "ZUluZm8SNAoSTG9jYWxMYW5ndWFnZVRhYmxlGA8gAygLMhguVGFibGUuTG9j",
            "YWxMYW5ndWFnZUluZm8SIgoJTWlzY1RhYmxlGBAgAygLMg8uVGFibGUuTWlz",
            "Y0luZm8SJAoKTW9kZWxUYWJsZRgRIAMoCzIQLlRhYmxlLk1vZGVsSW5mbxIk",
            "CgpNb3ZpZVRhYmxlGBIgAygLMhAuVGFibGUuTW92aWVJbmZvEjIKEU9wZW5G",
            "dW5jdGlvblRhYmxlGBMgAygLMhcuVGFibGUuT3BlbkZ1bmN0aW9uSW5mbxIs",
            "Cg5TaG9wR29vZHNUYWJsZRgUIAMoCzIULlRhYmxlLlNob3BHb29kc0luZm8S",
            "IgoJU2hvcFRhYmxlGBUgAygLMg8uVGFibGUuU2hvcEluZm8SJAoKU2tpbGxU",
            "YWJsZRgWIAMoCzIQLlRhYmxlLlNraWxsSW5mbxIiCglUYXNrVGFibGUYFyAD",
            "KAsyDy5UYWJsZS5UYXNrSW5mb2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.AiInfo), global::Table.AiInfo.Parser, new[]{ "Id", "Path", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.AudioInfo), global::Table.AudioInfo.Parser, new[]{ "Id", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.BasePropertyInfo), global::Table.BasePropertyInfo.Parser, new[]{ "Id", "Remark", "Jing", "Qi", "Shen", "Wu", "Fang", "Su", "Yun", "Shui", "Huo", "Lei", "Feng", "Tu", "Mo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.BattleActionInfo), global::Table.BattleActionInfo.Parser, new[]{ "Id", "Remark", "IsAnd", "RequireAction", "ResultAction", "ActionDelay", "Type", "ActionPosition", "IsShow", "IsEnd", "PerOfHealth", "MonsterId", "MonsterAi", "MonsterCount", "MonsterType", "DialogId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.BattleLevelInfo), global::Table.BattleLevelInfo.Parser, new[]{ "Id", "BattleAction", "LevelPrefab", "Born", "BgMusicId", "SceneMode", "LevelName", "SceneName", "SceneProperty", "LevelCostItem", "LevelGetItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.DialogueInfo), global::Table.DialogueInfo.Parser, new[]{ "Id", "NextId", "Name", "Head", "Audio", "Duration", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.DToDInfo), global::Table.DToDInfo.Parser, new[]{ "Id", "MaxExp", "MaxJing", "MaxQi", "MaxShen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.EquipInfo), global::Table.EquipInfo.Parser, new[]{ "Id", "Name", "ShowInBag", "Type", "PrivateId", "Icon", "Quality", "BasePropertyId", "Remark", "Buy", "Sell", "Split", "SplitNeed", "Merge", "MergeNeed", "ItemModelID", "ItemImageID", "ItemType", "ItemTypeVal", "ItemUseRange", "ItemUsePlace", "ItemUseJingTian", "ItemUseXueJian", "ItemUseChangQing", "ItemUseLongKui", "ItemUseZiXuan", "ItemOldVal", "ItemPrice", "ItemAttShui", "ItemAttHuo", "ItemAttFeng", "ItemAttLei", "ItemAttTu", "ItemSpecial", "ItemEffectShui", "ItemEffectHuo", "ItemEffectFeng", "ItemEffectLei", "ItemEffectTu", "ItemEffectJing", "ItemEffectQi", "ItemEffectShen", "ItemEffectWu", "ItemEffectFang", "ItemEffectSu", "ItemEffectYun", "ItemShuiDu", "ItemHuoDu", "ItemFengDu", "ItemLeiDu", "ItemTuDu", "ItemDing", "ItemFeng", "ItemJin", "ItemMian", "ItemLuan", "ItemKuang", "ItemJing", "ItemBi", "ItemJie", "ItemYin", "ItemWuAdd", "ItemWuSub", "ItemFangAdd", "ItemFangSub", "ItemSuAdd", "ItemSuSub", "ItemYunAdd", "ItemYunSub", "ItemPinSi", "ItemSiWang", "ItemBiDu", "ItemBiXie", "ItemTuiMo", "ItemShenYan", "ItemJingJin", "ItemLian", "ItemBaoJi", "ItemTeJi", "ItemQiSub", "ItemShenSub", "ItemComposeID1", "ItemComposeID2", "ItemComposePropID", "ItemStoneID", "ItemSmeltPropID", "ItemSmeltPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.FxInfo), global::Table.FxInfo.Parser, new[]{ "Id", "Path", "BindPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.GuideInfo), global::Table.GuideInfo.Parser, new[]{ "Id", "TriggerCondition", "Path", "Parent", "DelayTime", "TriggerRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.HeroInfo), global::Table.HeroInfo.Parser, new[]{ "Id", "Name", "SingleName", "PrefabPath", "Skills", "UseType", "DefaultOpen", "OpenNeed", "BasePropertyId", "Star" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.HostInfo), global::Table.HostInfo.Parser, new[]{ "Id", "Remark", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.ItemInfo), global::Table.ItemInfo.Parser, new[]{ "Id", "Name", "ShowInBag", "Type", "PrivateId", "Icon", "Quality", "BasePropertyId", "Remark", "Num", "Buy", "Sell", "Split", "SplitNeed", "Merge", "MergeNeed", "GetWay", "GetWayDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.LanguageInfo), global::Table.LanguageInfo.Parser, new[]{ "Id", "Mono" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.LocalLanguageInfo), global::Table.LocalLanguageInfo.Parser, new[]{ "Id", "Mono" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.MiscInfo), global::Table.MiscInfo.Parser, new[]{ "Id", "Remark", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.ModelInfo), global::Table.ModelInfo.Parser, new[]{ "Id", "MType", "MPath", "MName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.MovieInfo), global::Table.MovieInfo.Parser, new[]{ "Id", "Path", "Extension", "Durtion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.OpenFunctionInfo), global::Table.OpenFunctionInfo.Parser, new[]{ "Id", "Level", "Name", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.ShopGoodsInfo), global::Table.ShopGoodsInfo.Parser, new[]{ "Id", "Remark", "Type", "ItemInfo", "ShowNum", "CostId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.ShopInfo), global::Table.ShopInfo.Parser, new[]{ "Id", "Remark", "Type", "ItemInfo", "ShowNum", "CostId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.SkillInfo), global::Table.SkillInfo.Parser, new[]{ "Id", "Name", "Remark", "Icon", "PrivateId", "Type", "OpenBy", "BasePropertyId", "SkillAttShui", "SkillAttHuo", "SkillAttFeng", "SkillAttLei", "SkillAttTu", "SkillType", "UserJingTian", "UserXueJian", "UserChangQing", "UserLongKui", "UserZiXuan", "SkillUseRange", "SkillConsumeQi", "SkillConsumeShen", "SkillSpecialConsume", "SkillSpecialConsumeValue", "SkillSpecialState", "SkillUseOdds", "SkillShuiDu", "SkillHuoDu", "SkillFengDu", "SkillLeiDu", "SkillTuDu", "SkillDing", "SkillFeng", "SkillJin", "SkillMian", "SkillLuan", "SkillKuang", "SkillJing", "SkillBi", "SkillJie", "SkillYin", "SkillPinSi", "SkillSiWang", "SkillBiDu", "SkillWuAdd", "SkillWuSub", "SkillFangAdd", "SkillFangSub", "SkillSuAdd", "SkillSuSub", "SkillYunAdd", "SkillYunSub", "SkillEffectJing", "SkillEffectQi", "SkillEffectShen", "SkillEffectWu", "SkillEffectFang", "SkillEffectSu", "SkillEffectYun", "SkillEffectShui", "SkillEffectHuo", "SkillEffectFeng", "SkillEffectLei", "SkillEffectTu", "SkillLevel1NeedNum", "SkillLevel2NeedNum", "SkillLevel3NeedNum", "SkillLevel4NeedNum", "SkillAndID1", "SkillAndID2", "SkillAndID3", "SkillAndLevel1", "SkillAndLevel2", "SkillAndLevel3", "SkillComboLevel1", "SkillComboLevel2", "SkillComboLevel3", "SkillManLv1", "SkillManLv2", "SkillManLv3", "SkillComboID1", "SkillComboID2", "SkillComboID3", "SkillAddLvID", "SkillAddRoleLv", "SkillNeedLv", "SkillIsUseAll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.TaskInfo), global::Table.TaskInfo.Parser, new[]{ "Id", "NextId", "TaskType", "TaskName", "TaskIcon", "TaskDesc", "TaskCostItem", "TaskGetItem", "TaskMapId", "TaskNpcTalk", "TaskNpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Table.tables), global::Table.tables.Parser, new[]{ "AiTable", "AudioTable", "BasePropertyTable", "BattleActionTable", "BattleLevelTable", "DialogueTable", "DToDTable", "EquipTable", "FxTable", "GuideTable", "HeroTable", "HostTable", "ItemTable", "LanguageTable", "LocalLanguageTable", "MiscTable", "ModelTable", "MovieTable", "OpenFunctionTable", "ShopGoodsTable", "ShopTable", "SkillTable", "TaskTable" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AiInfo : pb::IMessage<AiInfo> {
    private static readonly pb::MessageParser<AiInfo> _parser = new pb::MessageParser<AiInfo>(() => new AiInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AiInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AiInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AiInfo(AiInfo other) : this() {
      id_ = other.id_;
      path_ = other.path_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AiInfo Clone() {
      return new AiInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AiInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AiInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AiInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioInfo : pb::IMessage<AudioInfo> {
    private static readonly pb::MessageParser<AudioInfo> _parser = new pb::MessageParser<AudioInfo>(() => new AudioInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioInfo(AudioInfo other) : this() {
      id_ = other.id_;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioInfo Clone() {
      return new AudioInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    ///  路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasePropertyInfo : pb::IMessage<BasePropertyInfo> {
    private static readonly pb::MessageParser<BasePropertyInfo> _parser = new pb::MessageParser<BasePropertyInfo>(() => new BasePropertyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasePropertyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasePropertyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasePropertyInfo(BasePropertyInfo other) : this() {
      id_ = other.id_;
      remark_ = other.remark_;
      jing_ = other.jing_;
      qi_ = other.qi_;
      shen_ = other.shen_;
      wu_ = other.wu_;
      fang_ = other.fang_;
      su_ = other.su_;
      yun_ = other.yun_;
      shui_ = other.shui_;
      huo_ = other.huo_;
      lei_ = other.lei_;
      feng_ = other.feng_;
      tu_ = other.tu_;
      mo_ = other.mo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasePropertyInfo Clone() {
      return new BasePropertyInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jing" field.</summary>
    public const int JingFieldNumber = 3;
    private float jing_;
    /// <summary>
    ///  精
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jing {
      get { return jing_; }
      set {
        jing_ = value;
      }
    }

    /// <summary>Field number for the "qi" field.</summary>
    public const int QiFieldNumber = 4;
    private float qi_;
    /// <summary>
    ///  气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Qi {
      get { return qi_; }
      set {
        qi_ = value;
      }
    }

    /// <summary>Field number for the "shen" field.</summary>
    public const int ShenFieldNumber = 5;
    private float shen_;
    /// <summary>
    ///  神
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shen {
      get { return shen_; }
      set {
        shen_ = value;
      }
    }

    /// <summary>Field number for the "wu" field.</summary>
    public const int WuFieldNumber = 6;
    private float wu_;
    /// <summary>
    ///  武
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Wu {
      get { return wu_; }
      set {
        wu_ = value;
      }
    }

    /// <summary>Field number for the "fang" field.</summary>
    public const int FangFieldNumber = 7;
    private float fang_;
    /// <summary>
    ///  防
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fang {
      get { return fang_; }
      set {
        fang_ = value;
      }
    }

    /// <summary>Field number for the "su" field.</summary>
    public const int SuFieldNumber = 8;
    private float su_;
    /// <summary>
    ///  速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Su {
      get { return su_; }
      set {
        su_ = value;
      }
    }

    /// <summary>Field number for the "yun" field.</summary>
    public const int YunFieldNumber = 9;
    private float yun_;
    /// <summary>
    ///  运
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yun {
      get { return yun_; }
      set {
        yun_ = value;
      }
    }

    /// <summary>Field number for the "shui" field.</summary>
    public const int ShuiFieldNumber = 10;
    private float shui_;
    /// <summary>
    ///  水
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shui {
      get { return shui_; }
      set {
        shui_ = value;
      }
    }

    /// <summary>Field number for the "huo" field.</summary>
    public const int HuoFieldNumber = 11;
    private float huo_;
    /// <summary>
    ///  火
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Huo {
      get { return huo_; }
      set {
        huo_ = value;
      }
    }

    /// <summary>Field number for the "lei" field.</summary>
    public const int LeiFieldNumber = 12;
    private float lei_;
    /// <summary>
    ///  雷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Lei {
      get { return lei_; }
      set {
        lei_ = value;
      }
    }

    /// <summary>Field number for the "feng" field.</summary>
    public const int FengFieldNumber = 13;
    private float feng_;
    /// <summary>
    ///  风
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Feng {
      get { return feng_; }
      set {
        feng_ = value;
      }
    }

    /// <summary>Field number for the "tu" field.</summary>
    public const int TuFieldNumber = 14;
    private float tu_;
    /// <summary>
    ///  土
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Tu {
      get { return tu_; }
      set {
        tu_ = value;
      }
    }

    /// <summary>Field number for the "mo" field.</summary>
    public const int MoFieldNumber = 15;
    private float mo_;
    /// <summary>
    ///  魔-景天专用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mo {
      get { return mo_; }
      set {
        mo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasePropertyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasePropertyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Remark != other.Remark) return false;
      if (Jing != other.Jing) return false;
      if (Qi != other.Qi) return false;
      if (Shen != other.Shen) return false;
      if (Wu != other.Wu) return false;
      if (Fang != other.Fang) return false;
      if (Su != other.Su) return false;
      if (Yun != other.Yun) return false;
      if (Shui != other.Shui) return false;
      if (Huo != other.Huo) return false;
      if (Lei != other.Lei) return false;
      if (Feng != other.Feng) return false;
      if (Tu != other.Tu) return false;
      if (Mo != other.Mo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Jing != 0F) hash ^= Jing.GetHashCode();
      if (Qi != 0F) hash ^= Qi.GetHashCode();
      if (Shen != 0F) hash ^= Shen.GetHashCode();
      if (Wu != 0F) hash ^= Wu.GetHashCode();
      if (Fang != 0F) hash ^= Fang.GetHashCode();
      if (Su != 0F) hash ^= Su.GetHashCode();
      if (Yun != 0F) hash ^= Yun.GetHashCode();
      if (Shui != 0F) hash ^= Shui.GetHashCode();
      if (Huo != 0F) hash ^= Huo.GetHashCode();
      if (Lei != 0F) hash ^= Lei.GetHashCode();
      if (Feng != 0F) hash ^= Feng.GetHashCode();
      if (Tu != 0F) hash ^= Tu.GetHashCode();
      if (Mo != 0F) hash ^= Mo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (Jing != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Jing);
      }
      if (Qi != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Qi);
      }
      if (Shen != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Shen);
      }
      if (Wu != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Wu);
      }
      if (Fang != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Fang);
      }
      if (Su != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Su);
      }
      if (Yun != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Yun);
      }
      if (Shui != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Shui);
      }
      if (Huo != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Huo);
      }
      if (Lei != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Lei);
      }
      if (Feng != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Feng);
      }
      if (Tu != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Tu);
      }
      if (Mo != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Mo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Jing != 0F) {
        size += 1 + 4;
      }
      if (Qi != 0F) {
        size += 1 + 4;
      }
      if (Shen != 0F) {
        size += 1 + 4;
      }
      if (Wu != 0F) {
        size += 1 + 4;
      }
      if (Fang != 0F) {
        size += 1 + 4;
      }
      if (Su != 0F) {
        size += 1 + 4;
      }
      if (Yun != 0F) {
        size += 1 + 4;
      }
      if (Shui != 0F) {
        size += 1 + 4;
      }
      if (Huo != 0F) {
        size += 1 + 4;
      }
      if (Lei != 0F) {
        size += 1 + 4;
      }
      if (Feng != 0F) {
        size += 1 + 4;
      }
      if (Tu != 0F) {
        size += 1 + 4;
      }
      if (Mo != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasePropertyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Jing != 0F) {
        Jing = other.Jing;
      }
      if (other.Qi != 0F) {
        Qi = other.Qi;
      }
      if (other.Shen != 0F) {
        Shen = other.Shen;
      }
      if (other.Wu != 0F) {
        Wu = other.Wu;
      }
      if (other.Fang != 0F) {
        Fang = other.Fang;
      }
      if (other.Su != 0F) {
        Su = other.Su;
      }
      if (other.Yun != 0F) {
        Yun = other.Yun;
      }
      if (other.Shui != 0F) {
        Shui = other.Shui;
      }
      if (other.Huo != 0F) {
        Huo = other.Huo;
      }
      if (other.Lei != 0F) {
        Lei = other.Lei;
      }
      if (other.Feng != 0F) {
        Feng = other.Feng;
      }
      if (other.Tu != 0F) {
        Tu = other.Tu;
      }
      if (other.Mo != 0F) {
        Mo = other.Mo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 29: {
            Jing = input.ReadFloat();
            break;
          }
          case 37: {
            Qi = input.ReadFloat();
            break;
          }
          case 45: {
            Shen = input.ReadFloat();
            break;
          }
          case 53: {
            Wu = input.ReadFloat();
            break;
          }
          case 61: {
            Fang = input.ReadFloat();
            break;
          }
          case 69: {
            Su = input.ReadFloat();
            break;
          }
          case 77: {
            Yun = input.ReadFloat();
            break;
          }
          case 85: {
            Shui = input.ReadFloat();
            break;
          }
          case 93: {
            Huo = input.ReadFloat();
            break;
          }
          case 101: {
            Lei = input.ReadFloat();
            break;
          }
          case 109: {
            Feng = input.ReadFloat();
            break;
          }
          case 117: {
            Tu = input.ReadFloat();
            break;
          }
          case 125: {
            Mo = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleActionInfo : pb::IMessage<BattleActionInfo> {
    private static readonly pb::MessageParser<BattleActionInfo> _parser = new pb::MessageParser<BattleActionInfo>(() => new BattleActionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleActionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleActionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleActionInfo(BattleActionInfo other) : this() {
      id_ = other.id_;
      remark_ = other.remark_;
      isAnd_ = other.isAnd_;
      requireAction_ = other.requireAction_;
      resultAction_ = other.resultAction_;
      actionDelay_ = other.actionDelay_;
      type_ = other.type_;
      actionPosition_ = other.actionPosition_;
      isShow_ = other.isShow_;
      isEnd_ = other.isEnd_;
      perOfHealth_ = other.perOfHealth_;
      monsterId_ = other.monsterId_;
      monsterAi_ = other.monsterAi_;
      monsterCount_ = other.monsterCount_;
      monsterType_ = other.monsterType_;
      dialogId_ = other.dialogId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleActionInfo Clone() {
      return new BattleActionInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isAnd" field.</summary>
    public const int IsAndFieldNumber = 3;
    private int isAnd_;
    /// <summary>
    ///  条件关系（0或，1与）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsAnd {
      get { return isAnd_; }
      set {
        isAnd_ = value;
      }
    }

    /// <summary>Field number for the "requireAction" field.</summary>
    public const int RequireActionFieldNumber = 4;
    private string requireAction_ = "";
    /// <summary>
    ///  需要的条件Action
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequireAction {
      get { return requireAction_; }
      set {
        requireAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resultAction" field.</summary>
    public const int ResultActionFieldNumber = 5;
    private string resultAction_ = "";
    /// <summary>
    ///  触发的结果Action
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResultAction {
      get { return resultAction_; }
      set {
        resultAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionDelay" field.</summary>
    public const int ActionDelayFieldNumber = 6;
    private string actionDelay_ = "";
    /// <summary>
    ///  action延迟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionDelay {
      get { return actionDelay_; }
      set {
        actionDelay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    /// <summary>
    ///  action类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionPosition" field.</summary>
    public const int ActionPositionFieldNumber = 8;
    private string actionPosition_ = "";
    /// <summary>
    ///  位置编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionPosition {
      get { return actionPosition_; }
      set {
        actionPosition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isShow" field.</summary>
    public const int IsShowFieldNumber = 9;
    private int isShow_;
    /// <summary>
    ///  物体隐藏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsShow {
      get { return isShow_; }
      set {
        isShow_ = value;
      }
    }

    /// <summary>Field number for the "isEnd" field.</summary>
    public const int IsEndFieldNumber = 10;
    private int isEnd_;
    /// <summary>
    ///  胜利或失败状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsEnd {
      get { return isEnd_; }
      set {
        isEnd_ = value;
      }
    }

    /// <summary>Field number for the "perOfHealth" field.</summary>
    public const int PerOfHealthFieldNumber = 11;
    private int perOfHealth_;
    /// <summary>
    ///  血量百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PerOfHealth {
      get { return perOfHealth_; }
      set {
        perOfHealth_ = value;
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 12;
    private string monsterId_ = "";
    /// <summary>
    ///  生成怪id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monsterAi" field.</summary>
    public const int MonsterAiFieldNumber = 13;
    private string monsterAi_ = "";
    /// <summary>
    ///  生成怪AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonsterAi {
      get { return monsterAi_; }
      set {
        monsterAi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monsterCount" field.</summary>
    public const int MonsterCountFieldNumber = 14;
    private int monsterCount_;
    /// <summary>
    ///  生成怪数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterCount {
      get { return monsterCount_; }
      set {
        monsterCount_ = value;
      }
    }

    /// <summary>Field number for the "monsterType" field.</summary>
    public const int MonsterTypeFieldNumber = 15;
    private string monsterType_ = "";
    /// <summary>
    ///  生成怪枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonsterType {
      get { return monsterType_; }
      set {
        monsterType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dialogId" field.</summary>
    public const int DialogIdFieldNumber = 16;
    private string dialogId_ = "";
    /// <summary>
    ///  对话开始Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DialogId {
      get { return dialogId_; }
      set {
        dialogId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleActionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleActionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Remark != other.Remark) return false;
      if (IsAnd != other.IsAnd) return false;
      if (RequireAction != other.RequireAction) return false;
      if (ResultAction != other.ResultAction) return false;
      if (ActionDelay != other.ActionDelay) return false;
      if (Type != other.Type) return false;
      if (ActionPosition != other.ActionPosition) return false;
      if (IsShow != other.IsShow) return false;
      if (IsEnd != other.IsEnd) return false;
      if (PerOfHealth != other.PerOfHealth) return false;
      if (MonsterId != other.MonsterId) return false;
      if (MonsterAi != other.MonsterAi) return false;
      if (MonsterCount != other.MonsterCount) return false;
      if (MonsterType != other.MonsterType) return false;
      if (DialogId != other.DialogId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (IsAnd != 0) hash ^= IsAnd.GetHashCode();
      if (RequireAction.Length != 0) hash ^= RequireAction.GetHashCode();
      if (ResultAction.Length != 0) hash ^= ResultAction.GetHashCode();
      if (ActionDelay.Length != 0) hash ^= ActionDelay.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ActionPosition.Length != 0) hash ^= ActionPosition.GetHashCode();
      if (IsShow != 0) hash ^= IsShow.GetHashCode();
      if (IsEnd != 0) hash ^= IsEnd.GetHashCode();
      if (PerOfHealth != 0) hash ^= PerOfHealth.GetHashCode();
      if (MonsterId.Length != 0) hash ^= MonsterId.GetHashCode();
      if (MonsterAi.Length != 0) hash ^= MonsterAi.GetHashCode();
      if (MonsterCount != 0) hash ^= MonsterCount.GetHashCode();
      if (MonsterType.Length != 0) hash ^= MonsterType.GetHashCode();
      if (DialogId.Length != 0) hash ^= DialogId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (IsAnd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsAnd);
      }
      if (RequireAction.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequireAction);
      }
      if (ResultAction.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResultAction);
      }
      if (ActionDelay.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ActionDelay);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
      if (ActionPosition.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ActionPosition);
      }
      if (IsShow != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IsShow);
      }
      if (IsEnd != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsEnd);
      }
      if (PerOfHealth != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PerOfHealth);
      }
      if (MonsterId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MonsterId);
      }
      if (MonsterAi.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MonsterAi);
      }
      if (MonsterCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MonsterCount);
      }
      if (MonsterType.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MonsterType);
      }
      if (DialogId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(DialogId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (IsAnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsAnd);
      }
      if (RequireAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequireAction);
      }
      if (ResultAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultAction);
      }
      if (ActionDelay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionDelay);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ActionPosition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionPosition);
      }
      if (IsShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsShow);
      }
      if (IsEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsEnd);
      }
      if (PerOfHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PerOfHealth);
      }
      if (MonsterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MonsterId);
      }
      if (MonsterAi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MonsterAi);
      }
      if (MonsterCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterCount);
      }
      if (MonsterType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MonsterType);
      }
      if (DialogId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DialogId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleActionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.IsAnd != 0) {
        IsAnd = other.IsAnd;
      }
      if (other.RequireAction.Length != 0) {
        RequireAction = other.RequireAction;
      }
      if (other.ResultAction.Length != 0) {
        ResultAction = other.ResultAction;
      }
      if (other.ActionDelay.Length != 0) {
        ActionDelay = other.ActionDelay;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ActionPosition.Length != 0) {
        ActionPosition = other.ActionPosition;
      }
      if (other.IsShow != 0) {
        IsShow = other.IsShow;
      }
      if (other.IsEnd != 0) {
        IsEnd = other.IsEnd;
      }
      if (other.PerOfHealth != 0) {
        PerOfHealth = other.PerOfHealth;
      }
      if (other.MonsterId.Length != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.MonsterAi.Length != 0) {
        MonsterAi = other.MonsterAi;
      }
      if (other.MonsterCount != 0) {
        MonsterCount = other.MonsterCount;
      }
      if (other.MonsterType.Length != 0) {
        MonsterType = other.MonsterType;
      }
      if (other.DialogId.Length != 0) {
        DialogId = other.DialogId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 24: {
            IsAnd = input.ReadInt32();
            break;
          }
          case 34: {
            RequireAction = input.ReadString();
            break;
          }
          case 42: {
            ResultAction = input.ReadString();
            break;
          }
          case 50: {
            ActionDelay = input.ReadString();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
          case 66: {
            ActionPosition = input.ReadString();
            break;
          }
          case 72: {
            IsShow = input.ReadInt32();
            break;
          }
          case 80: {
            IsEnd = input.ReadInt32();
            break;
          }
          case 88: {
            PerOfHealth = input.ReadInt32();
            break;
          }
          case 98: {
            MonsterId = input.ReadString();
            break;
          }
          case 106: {
            MonsterAi = input.ReadString();
            break;
          }
          case 112: {
            MonsterCount = input.ReadInt32();
            break;
          }
          case 122: {
            MonsterType = input.ReadString();
            break;
          }
          case 130: {
            DialogId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleLevelInfo : pb::IMessage<BattleLevelInfo> {
    private static readonly pb::MessageParser<BattleLevelInfo> _parser = new pb::MessageParser<BattleLevelInfo>(() => new BattleLevelInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleLevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLevelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLevelInfo(BattleLevelInfo other) : this() {
      id_ = other.id_;
      battleAction_ = other.battleAction_;
      levelPrefab_ = other.levelPrefab_;
      born_ = other.born_;
      bgMusicId_ = other.bgMusicId_;
      sceneMode_ = other.sceneMode_;
      levelName_ = other.levelName_;
      sceneName_ = other.sceneName_;
      sceneProperty_ = other.sceneProperty_;
      levelCostItem_ = other.levelCostItem_.Clone();
      levelGetItem_ = other.levelGetItem_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLevelInfo Clone() {
      return new BattleLevelInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battleAction" field.</summary>
    public const int BattleActionFieldNumber = 2;
    private string battleAction_ = "";
    /// <summary>
    ///  关卡事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleAction {
      get { return battleAction_; }
      set {
        battleAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelPrefab" field.</summary>
    public const int LevelPrefabFieldNumber = 3;
    private string levelPrefab_ = "";
    /// <summary>
    ///  关卡预制件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelPrefab {
      get { return levelPrefab_; }
      set {
        levelPrefab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "born" field.</summary>
    public const int BornFieldNumber = 4;
    private string born_ = "";
    /// <summary>
    ///  关卡起始位置索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Born {
      get { return born_; }
      set {
        born_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bgMusicId" field.</summary>
    public const int BgMusicIdFieldNumber = 5;
    private int bgMusicId_;
    /// <summary>
    ///  背景音乐
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BgMusicId {
      get { return bgMusicId_; }
      set {
        bgMusicId_ = value;
      }
    }

    /// <summary>Field number for the "sceneMode" field.</summary>
    public const int SceneModeFieldNumber = 6;
    private int sceneMode_;
    /// <summary>
    ///  游戏关卡玩法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneMode {
      get { return sceneMode_; }
      set {
        sceneMode_ = value;
      }
    }

    /// <summary>Field number for the "levelName" field.</summary>
    public const int LevelNameFieldNumber = 7;
    private string levelName_ = "";
    /// <summary>
    ///  关卡名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelName {
      get { return levelName_; }
      set {
        levelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sceneName" field.</summary>
    public const int SceneNameFieldNumber = 8;
    private string sceneName_ = "";
    /// <summary>
    ///  场景名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sceneProperty" field.</summary>
    public const int ScenePropertyFieldNumber = 9;
    private int sceneProperty_;
    /// <summary>
    ///  场景环境属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneProperty {
      get { return sceneProperty_; }
      set {
        sceneProperty_ = value;
      }
    }

    /// <summary>Field number for the "levelCostItem" field.</summary>
    public const int LevelCostItemFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_levelCostItem_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> levelCostItem_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  消耗道具信息（道具id以及数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelCostItem {
      get { return levelCostItem_; }
    }

    /// <summary>Field number for the "levelGetItem" field.</summary>
    public const int LevelGetItemFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_levelGetItem_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> levelGetItem_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  可获取道具信息（道具id以及数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelGetItem {
      get { return levelGetItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleLevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleLevelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BattleAction != other.BattleAction) return false;
      if (LevelPrefab != other.LevelPrefab) return false;
      if (Born != other.Born) return false;
      if (BgMusicId != other.BgMusicId) return false;
      if (SceneMode != other.SceneMode) return false;
      if (LevelName != other.LevelName) return false;
      if (SceneName != other.SceneName) return false;
      if (SceneProperty != other.SceneProperty) return false;
      if(!levelCostItem_.Equals(other.levelCostItem_)) return false;
      if(!levelGetItem_.Equals(other.levelGetItem_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (BattleAction.Length != 0) hash ^= BattleAction.GetHashCode();
      if (LevelPrefab.Length != 0) hash ^= LevelPrefab.GetHashCode();
      if (Born.Length != 0) hash ^= Born.GetHashCode();
      if (BgMusicId != 0) hash ^= BgMusicId.GetHashCode();
      if (SceneMode != 0) hash ^= SceneMode.GetHashCode();
      if (LevelName.Length != 0) hash ^= LevelName.GetHashCode();
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      if (SceneProperty != 0) hash ^= SceneProperty.GetHashCode();
      hash ^= levelCostItem_.GetHashCode();
      hash ^= levelGetItem_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (BattleAction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BattleAction);
      }
      if (LevelPrefab.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LevelPrefab);
      }
      if (Born.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Born);
      }
      if (BgMusicId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BgMusicId);
      }
      if (SceneMode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SceneMode);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LevelName);
      }
      if (SceneName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SceneName);
      }
      if (SceneProperty != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SceneProperty);
      }
      levelCostItem_.WriteTo(output, _repeated_levelCostItem_codec);
      levelGetItem_.WriteTo(output, _repeated_levelGetItem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (BattleAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleAction);
      }
      if (LevelPrefab.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelPrefab);
      }
      if (Born.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Born);
      }
      if (BgMusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BgMusicId);
      }
      if (SceneMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneMode);
      }
      if (LevelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelName);
      }
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      if (SceneProperty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneProperty);
      }
      size += levelCostItem_.CalculateSize(_repeated_levelCostItem_codec);
      size += levelGetItem_.CalculateSize(_repeated_levelGetItem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleLevelInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.BattleAction.Length != 0) {
        BattleAction = other.BattleAction;
      }
      if (other.LevelPrefab.Length != 0) {
        LevelPrefab = other.LevelPrefab;
      }
      if (other.Born.Length != 0) {
        Born = other.Born;
      }
      if (other.BgMusicId != 0) {
        BgMusicId = other.BgMusicId;
      }
      if (other.SceneMode != 0) {
        SceneMode = other.SceneMode;
      }
      if (other.LevelName.Length != 0) {
        LevelName = other.LevelName;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      if (other.SceneProperty != 0) {
        SceneProperty = other.SceneProperty;
      }
      levelCostItem_.Add(other.levelCostItem_);
      levelGetItem_.Add(other.levelGetItem_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            BattleAction = input.ReadString();
            break;
          }
          case 26: {
            LevelPrefab = input.ReadString();
            break;
          }
          case 34: {
            Born = input.ReadString();
            break;
          }
          case 40: {
            BgMusicId = input.ReadInt32();
            break;
          }
          case 48: {
            SceneMode = input.ReadInt32();
            break;
          }
          case 58: {
            LevelName = input.ReadString();
            break;
          }
          case 66: {
            SceneName = input.ReadString();
            break;
          }
          case 72: {
            SceneProperty = input.ReadInt32();
            break;
          }
          case 82: {
            levelCostItem_.AddEntriesFrom(input, _repeated_levelCostItem_codec);
            break;
          }
          case 90: {
            levelGetItem_.AddEntriesFrom(input, _repeated_levelGetItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DialogueInfo : pb::IMessage<DialogueInfo> {
    private static readonly pb::MessageParser<DialogueInfo> _parser = new pb::MessageParser<DialogueInfo>(() => new DialogueInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DialogueInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogueInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogueInfo(DialogueInfo other) : this() {
      id_ = other.id_;
      nextId_ = other.nextId_;
      name_ = other.name_;
      head_ = other.head_;
      audio_ = other.audio_;
      duration_ = other.duration_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogueInfo Clone() {
      return new DialogueInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextId" field.</summary>
    public const int NextIdFieldNumber = 2;
    private string nextId_ = "";
    /// <summary>
    ///  下一个对话（多个随机）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextId {
      get { return nextId_; }
      set {
        nextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  说话人名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 4;
    private string head_ = "";
    /// <summary>
    ///  说话人头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 5;
    private string audio_ = "";
    /// <summary>
    ///  对话语音
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Audio {
      get { return audio_; }
      set {
        audio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 6;
    private float duration_;
    /// <summary>
    ///  对话持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    /// <summary>
    ///  对话内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DialogueInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DialogueInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NextId != other.NextId) return false;
      if (Name != other.Name) return false;
      if (Head != other.Head) return false;
      if (Audio != other.Audio) return false;
      if (Duration != other.Duration) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (NextId.Length != 0) hash ^= NextId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Head.Length != 0) hash ^= Head.GetHashCode();
      if (Audio.Length != 0) hash ^= Audio.GetHashCode();
      if (Duration != 0F) hash ^= Duration.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (NextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Head);
      }
      if (Audio.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Audio);
      }
      if (Duration != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Duration);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (NextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
      }
      if (Audio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Audio);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DialogueInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.NextId.Length != 0) {
        NextId = other.NextId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Head.Length != 0) {
        Head = other.Head;
      }
      if (other.Audio.Length != 0) {
        Audio = other.Audio;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            NextId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Head = input.ReadString();
            break;
          }
          case 42: {
            Audio = input.ReadString();
            break;
          }
          case 53: {
            Duration = input.ReadFloat();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DToDInfo : pb::IMessage<DToDInfo> {
    private static readonly pb::MessageParser<DToDInfo> _parser = new pb::MessageParser<DToDInfo>(() => new DToDInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DToDInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DToDInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DToDInfo(DToDInfo other) : this() {
      id_ = other.id_;
      maxExp_ = other.maxExp_;
      maxJing_ = other.maxJing_;
      maxQi_ = other.maxQi_;
      maxShen_ = other.maxShen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DToDInfo Clone() {
      return new DToDInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号（等级）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "maxExp" field.</summary>
    public const int MaxExpFieldNumber = 2;
    private int maxExp_;
    /// <summary>
    ///  当前等级最大经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxExp {
      get { return maxExp_; }
      set {
        maxExp_ = value;
      }
    }

    /// <summary>Field number for the "maxJing" field.</summary>
    public const int MaxJingFieldNumber = 3;
    private string maxJing_ = "";
    /// <summary>
    ///  当前等级最大精
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaxJing {
      get { return maxJing_; }
      set {
        maxJing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxQi" field.</summary>
    public const int MaxQiFieldNumber = 4;
    private string maxQi_ = "";
    /// <summary>
    ///  当前等级最大气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaxQi {
      get { return maxQi_; }
      set {
        maxQi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxShen" field.</summary>
    public const int MaxShenFieldNumber = 5;
    private string maxShen_ = "";
    /// <summary>
    ///  当前等级最大神
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaxShen {
      get { return maxShen_; }
      set {
        maxShen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DToDInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DToDInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MaxExp != other.MaxExp) return false;
      if (MaxJing != other.MaxJing) return false;
      if (MaxQi != other.MaxQi) return false;
      if (MaxShen != other.MaxShen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MaxExp != 0) hash ^= MaxExp.GetHashCode();
      if (MaxJing.Length != 0) hash ^= MaxJing.GetHashCode();
      if (MaxQi.Length != 0) hash ^= MaxQi.GetHashCode();
      if (MaxShen.Length != 0) hash ^= MaxShen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MaxExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxExp);
      }
      if (MaxJing.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaxJing);
      }
      if (MaxQi.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MaxQi);
      }
      if (MaxShen.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MaxShen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MaxExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxExp);
      }
      if (MaxJing.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaxJing);
      }
      if (MaxQi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaxQi);
      }
      if (MaxShen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaxShen);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DToDInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MaxExp != 0) {
        MaxExp = other.MaxExp;
      }
      if (other.MaxJing.Length != 0) {
        MaxJing = other.MaxJing;
      }
      if (other.MaxQi.Length != 0) {
        MaxQi = other.MaxQi;
      }
      if (other.MaxShen.Length != 0) {
        MaxShen = other.MaxShen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MaxExp = input.ReadInt32();
            break;
          }
          case 26: {
            MaxJing = input.ReadString();
            break;
          }
          case 34: {
            MaxQi = input.ReadString();
            break;
          }
          case 42: {
            MaxShen = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipInfo : pb::IMessage<EquipInfo> {
    private static readonly pb::MessageParser<EquipInfo> _parser = new pb::MessageParser<EquipInfo>(() => new EquipInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipInfo(EquipInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      showInBag_ = other.showInBag_;
      type_ = other.type_;
      privateId_ = other.privateId_;
      icon_ = other.icon_;
      quality_ = other.quality_;
      basePropertyId_ = other.basePropertyId_;
      remark_ = other.remark_;
      buy_ = other.buy_;
      sell_ = other.sell_;
      split_ = other.split_;
      splitNeed_ = other.splitNeed_;
      merge_ = other.merge_;
      mergeNeed_ = other.mergeNeed_;
      itemModelID_ = other.itemModelID_;
      itemImageID_ = other.itemImageID_;
      itemType_ = other.itemType_;
      itemTypeVal_ = other.itemTypeVal_;
      itemUseRange_ = other.itemUseRange_;
      itemUsePlace_ = other.itemUsePlace_;
      itemUseJingTian_ = other.itemUseJingTian_;
      itemUseXueJian_ = other.itemUseXueJian_;
      itemUseChangQing_ = other.itemUseChangQing_;
      itemUseLongKui_ = other.itemUseLongKui_;
      itemUseZiXuan_ = other.itemUseZiXuan_;
      itemOldVal_ = other.itemOldVal_;
      itemPrice_ = other.itemPrice_;
      itemAttShui_ = other.itemAttShui_;
      itemAttHuo_ = other.itemAttHuo_;
      itemAttFeng_ = other.itemAttFeng_;
      itemAttLei_ = other.itemAttLei_;
      itemAttTu_ = other.itemAttTu_;
      itemSpecial_ = other.itemSpecial_;
      itemEffectShui_ = other.itemEffectShui_;
      itemEffectHuo_ = other.itemEffectHuo_;
      itemEffectFeng_ = other.itemEffectFeng_;
      itemEffectLei_ = other.itemEffectLei_;
      itemEffectTu_ = other.itemEffectTu_;
      itemEffectJing_ = other.itemEffectJing_;
      itemEffectQi_ = other.itemEffectQi_;
      itemEffectShen_ = other.itemEffectShen_;
      itemEffectWu_ = other.itemEffectWu_;
      itemEffectFang_ = other.itemEffectFang_;
      itemEffectSu_ = other.itemEffectSu_;
      itemEffectYun_ = other.itemEffectYun_;
      itemShuiDu_ = other.itemShuiDu_;
      itemHuoDu_ = other.itemHuoDu_;
      itemFengDu_ = other.itemFengDu_;
      itemLeiDu_ = other.itemLeiDu_;
      itemTuDu_ = other.itemTuDu_;
      itemDing_ = other.itemDing_;
      itemFeng_ = other.itemFeng_;
      itemJin_ = other.itemJin_;
      itemMian_ = other.itemMian_;
      itemLuan_ = other.itemLuan_;
      itemKuang_ = other.itemKuang_;
      itemJing_ = other.itemJing_;
      itemBi_ = other.itemBi_;
      itemJie_ = other.itemJie_;
      itemYin_ = other.itemYin_;
      itemWuAdd_ = other.itemWuAdd_;
      itemWuSub_ = other.itemWuSub_;
      itemFangAdd_ = other.itemFangAdd_;
      itemFangSub_ = other.itemFangSub_;
      itemSuAdd_ = other.itemSuAdd_;
      itemSuSub_ = other.itemSuSub_;
      itemYunAdd_ = other.itemYunAdd_;
      itemYunSub_ = other.itemYunSub_;
      itemPinSi_ = other.itemPinSi_;
      itemSiWang_ = other.itemSiWang_;
      itemBiDu_ = other.itemBiDu_;
      itemBiXie_ = other.itemBiXie_;
      itemTuiMo_ = other.itemTuiMo_;
      itemShenYan_ = other.itemShenYan_;
      itemJingJin_ = other.itemJingJin_;
      itemLian_ = other.itemLian_;
      itemBaoJi_ = other.itemBaoJi_;
      itemTeJi_ = other.itemTeJi_;
      itemQiSub_ = other.itemQiSub_;
      itemShenSub_ = other.itemShenSub_;
      itemComposeID1_ = other.itemComposeID1_;
      itemComposeID2_ = other.itemComposeID2_;
      itemComposePropID_ = other.itemComposePropID_;
      itemStoneID_ = other.itemStoneID_;
      itemSmeltPropID_ = other.itemSmeltPropID_;
      itemSmeltPrice_ = other.itemSmeltPrice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipInfo Clone() {
      return new EquipInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  道具名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showInBag" field.</summary>
    public const int ShowInBagFieldNumber = 3;
    private int showInBag_;
    /// <summary>
    ///  道具是否显示在背包中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowInBag {
      get { return showInBag_; }
      set {
        showInBag_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///  道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "privateId" field.</summary>
    public const int PrivateIdFieldNumber = 5;
    private string privateId_ = "";
    /// <summary>
    ///  专属人物id(为零时不专属)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateId {
      get { return privateId_; }
      set {
        privateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    /// <summary>
    ///  道具图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 7;
    private int quality_;
    /// <summary>
    ///  道具品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "basePropertyId" field.</summary>
    public const int BasePropertyIdFieldNumber = 8;
    private string basePropertyId_ = "";
    /// <summary>
    ///  道具作用属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePropertyId {
      get { return basePropertyId_; }
      set {
        basePropertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 9;
    private string remark_ = "";
    /// <summary>
    ///  道具描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buy" field.</summary>
    public const int BuyFieldNumber = 10;
    private string buy_ = "";
    /// <summary>
    ///  买入价(消耗道具类型以及数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Buy {
      get { return buy_; }
      set {
        buy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sell" field.</summary>
    public const int SellFieldNumber = 11;
    private string sell_ = "";
    /// <summary>
    ///  卖出价(获得道具类型以及数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sell {
      get { return sell_; }
      set {
        sell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "split" field.</summary>
    public const int SplitFieldNumber = 12;
    private string split_ = "";
    /// <summary>
    ///  可分解拆分以及数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Split {
      get { return split_; }
      set {
        split_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "splitNeed" field.</summary>
    public const int SplitNeedFieldNumber = 13;
    private string splitNeed_ = "";
    /// <summary>
    ///  可分解拆分要求（其余道具信息）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SplitNeed {
      get { return splitNeed_; }
      set {
        splitNeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merge" field.</summary>
    public const int MergeFieldNumber = 14;
    private string merge_ = "";
    /// <summary>
    ///  可合成某物以及需要数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Merge {
      get { return merge_; }
      set {
        merge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mergeNeed" field.</summary>
    public const int MergeNeedFieldNumber = 15;
    private string mergeNeed_ = "";
    /// <summary>
    ///  可合成某物要求（其余道具信息）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MergeNeed {
      get { return mergeNeed_; }
      set {
        mergeNeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_ModelID" field.</summary>
    public const int ItemModelIDFieldNumber = 16;
    private string itemModelID_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemModelID {
      get { return itemModelID_; }
      set {
        itemModelID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_ImageID" field.</summary>
    public const int ItemImageIDFieldNumber = 17;
    private string itemImageID_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemImageID {
      get { return itemImageID_; }
      set {
        itemImageID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Type" field.</summary>
    public const int ItemTypeFieldNumber = 18;
    private int itemType_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "Item_TypeVal" field.</summary>
    public const int ItemTypeValFieldNumber = 19;
    private int itemTypeVal_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemTypeVal {
      get { return itemTypeVal_; }
      set {
        itemTypeVal_ = value;
      }
    }

    /// <summary>Field number for the "Item_UseRange" field.</summary>
    public const int ItemUseRangeFieldNumber = 20;
    private int itemUseRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUseRange {
      get { return itemUseRange_; }
      set {
        itemUseRange_ = value;
      }
    }

    /// <summary>Field number for the "Item_UsePlace" field.</summary>
    public const int ItemUsePlaceFieldNumber = 21;
    private int itemUsePlace_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUsePlace {
      get { return itemUsePlace_; }
      set {
        itemUsePlace_ = value;
      }
    }

    /// <summary>Field number for the "Item_Use_JingTian" field.</summary>
    public const int ItemUseJingTianFieldNumber = 22;
    private int itemUseJingTian_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUseJingTian {
      get { return itemUseJingTian_; }
      set {
        itemUseJingTian_ = value;
      }
    }

    /// <summary>Field number for the "Item_Use_XueJian" field.</summary>
    public const int ItemUseXueJianFieldNumber = 23;
    private int itemUseXueJian_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUseXueJian {
      get { return itemUseXueJian_; }
      set {
        itemUseXueJian_ = value;
      }
    }

    /// <summary>Field number for the "Item_Use_ChangQing" field.</summary>
    public const int ItemUseChangQingFieldNumber = 24;
    private int itemUseChangQing_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUseChangQing {
      get { return itemUseChangQing_; }
      set {
        itemUseChangQing_ = value;
      }
    }

    /// <summary>Field number for the "Item_Use_LongKui" field.</summary>
    public const int ItemUseLongKuiFieldNumber = 25;
    private int itemUseLongKui_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUseLongKui {
      get { return itemUseLongKui_; }
      set {
        itemUseLongKui_ = value;
      }
    }

    /// <summary>Field number for the "Item_Use_ZiXuan" field.</summary>
    public const int ItemUseZiXuanFieldNumber = 26;
    private int itemUseZiXuan_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUseZiXuan {
      get { return itemUseZiXuan_; }
      set {
        itemUseZiXuan_ = value;
      }
    }

    /// <summary>Field number for the "Item_Old_Val" field.</summary>
    public const int ItemOldValFieldNumber = 27;
    private int itemOldVal_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemOldVal {
      get { return itemOldVal_; }
      set {
        itemOldVal_ = value;
      }
    }

    /// <summary>Field number for the "Item_Price" field.</summary>
    public const int ItemPriceFieldNumber = 28;
    private int itemPrice_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemPrice {
      get { return itemPrice_; }
      set {
        itemPrice_ = value;
      }
    }

    /// <summary>Field number for the "Item_AttShui" field.</summary>
    public const int ItemAttShuiFieldNumber = 29;
    private int itemAttShui_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAttShui {
      get { return itemAttShui_; }
      set {
        itemAttShui_ = value;
      }
    }

    /// <summary>Field number for the "Item_AttHuo" field.</summary>
    public const int ItemAttHuoFieldNumber = 30;
    private int itemAttHuo_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAttHuo {
      get { return itemAttHuo_; }
      set {
        itemAttHuo_ = value;
      }
    }

    /// <summary>Field number for the "Item_AttFeng" field.</summary>
    public const int ItemAttFengFieldNumber = 31;
    private int itemAttFeng_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAttFeng {
      get { return itemAttFeng_; }
      set {
        itemAttFeng_ = value;
      }
    }

    /// <summary>Field number for the "Item_AttLei" field.</summary>
    public const int ItemAttLeiFieldNumber = 32;
    private int itemAttLei_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAttLei {
      get { return itemAttLei_; }
      set {
        itemAttLei_ = value;
      }
    }

    /// <summary>Field number for the "Item_AttTu" field.</summary>
    public const int ItemAttTuFieldNumber = 33;
    private int itemAttTu_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemAttTu {
      get { return itemAttTu_; }
      set {
        itemAttTu_ = value;
      }
    }

    /// <summary>Field number for the "Item_Special" field.</summary>
    public const int ItemSpecialFieldNumber = 34;
    private int itemSpecial_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSpecial {
      get { return itemSpecial_; }
      set {
        itemSpecial_ = value;
      }
    }

    /// <summary>Field number for the "Item_Effect_Shui" field.</summary>
    public const int ItemEffectShuiFieldNumber = 35;
    private string itemEffectShui_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectShui {
      get { return itemEffectShui_; }
      set {
        itemEffectShui_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Huo" field.</summary>
    public const int ItemEffectHuoFieldNumber = 36;
    private string itemEffectHuo_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectHuo {
      get { return itemEffectHuo_; }
      set {
        itemEffectHuo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Feng" field.</summary>
    public const int ItemEffectFengFieldNumber = 37;
    private string itemEffectFeng_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectFeng {
      get { return itemEffectFeng_; }
      set {
        itemEffectFeng_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Lei" field.</summary>
    public const int ItemEffectLeiFieldNumber = 38;
    private string itemEffectLei_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectLei {
      get { return itemEffectLei_; }
      set {
        itemEffectLei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Tu" field.</summary>
    public const int ItemEffectTuFieldNumber = 39;
    private string itemEffectTu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectTu {
      get { return itemEffectTu_; }
      set {
        itemEffectTu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Jing" field.</summary>
    public const int ItemEffectJingFieldNumber = 40;
    private string itemEffectJing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectJing {
      get { return itemEffectJing_; }
      set {
        itemEffectJing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Qi" field.</summary>
    public const int ItemEffectQiFieldNumber = 41;
    private string itemEffectQi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectQi {
      get { return itemEffectQi_; }
      set {
        itemEffectQi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Shen" field.</summary>
    public const int ItemEffectShenFieldNumber = 42;
    private string itemEffectShen_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectShen {
      get { return itemEffectShen_; }
      set {
        itemEffectShen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Wu" field.</summary>
    public const int ItemEffectWuFieldNumber = 43;
    private string itemEffectWu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectWu {
      get { return itemEffectWu_; }
      set {
        itemEffectWu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Fang" field.</summary>
    public const int ItemEffectFangFieldNumber = 44;
    private string itemEffectFang_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectFang {
      get { return itemEffectFang_; }
      set {
        itemEffectFang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Su" field.</summary>
    public const int ItemEffectSuFieldNumber = 45;
    private string itemEffectSu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectSu {
      get { return itemEffectSu_; }
      set {
        itemEffectSu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Effect_Yun" field.</summary>
    public const int ItemEffectYunFieldNumber = 46;
    private string itemEffectYun_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemEffectYun {
      get { return itemEffectYun_; }
      set {
        itemEffectYun_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_ShuiDu" field.</summary>
    public const int ItemShuiDuFieldNumber = 47;
    private string itemShuiDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemShuiDu {
      get { return itemShuiDu_; }
      set {
        itemShuiDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_HuoDu" field.</summary>
    public const int ItemHuoDuFieldNumber = 48;
    private string itemHuoDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemHuoDu {
      get { return itemHuoDu_; }
      set {
        itemHuoDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_FengDu" field.</summary>
    public const int ItemFengDuFieldNumber = 49;
    private string itemFengDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemFengDu {
      get { return itemFengDu_; }
      set {
        itemFengDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_LeiDu" field.</summary>
    public const int ItemLeiDuFieldNumber = 50;
    private string itemLeiDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemLeiDu {
      get { return itemLeiDu_; }
      set {
        itemLeiDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_TuDu" field.</summary>
    public const int ItemTuDuFieldNumber = 51;
    private string itemTuDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemTuDu {
      get { return itemTuDu_; }
      set {
        itemTuDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Ding" field.</summary>
    public const int ItemDingFieldNumber = 52;
    private string itemDing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemDing {
      get { return itemDing_; }
      set {
        itemDing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Feng" field.</summary>
    public const int ItemFengFieldNumber = 53;
    private string itemFeng_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemFeng {
      get { return itemFeng_; }
      set {
        itemFeng_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Jin" field.</summary>
    public const int ItemJinFieldNumber = 54;
    private string itemJin_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemJin {
      get { return itemJin_; }
      set {
        itemJin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Mian" field.</summary>
    public const int ItemMianFieldNumber = 55;
    private string itemMian_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemMian {
      get { return itemMian_; }
      set {
        itemMian_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Luan" field.</summary>
    public const int ItemLuanFieldNumber = 56;
    private string itemLuan_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemLuan {
      get { return itemLuan_; }
      set {
        itemLuan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Kuang" field.</summary>
    public const int ItemKuangFieldNumber = 57;
    private string itemKuang_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemKuang {
      get { return itemKuang_; }
      set {
        itemKuang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Jing" field.</summary>
    public const int ItemJingFieldNumber = 58;
    private string itemJing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemJing {
      get { return itemJing_; }
      set {
        itemJing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Bi" field.</summary>
    public const int ItemBiFieldNumber = 59;
    private string itemBi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemBi {
      get { return itemBi_; }
      set {
        itemBi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Jie" field.</summary>
    public const int ItemJieFieldNumber = 60;
    private string itemJie_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemJie {
      get { return itemJie_; }
      set {
        itemJie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Yin" field.</summary>
    public const int ItemYinFieldNumber = 61;
    private string itemYin_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemYin {
      get { return itemYin_; }
      set {
        itemYin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_WuAdd" field.</summary>
    public const int ItemWuAddFieldNumber = 62;
    private string itemWuAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemWuAdd {
      get { return itemWuAdd_; }
      set {
        itemWuAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_WuSub" field.</summary>
    public const int ItemWuSubFieldNumber = 63;
    private string itemWuSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemWuSub {
      get { return itemWuSub_; }
      set {
        itemWuSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_FangAdd" field.</summary>
    public const int ItemFangAddFieldNumber = 64;
    private string itemFangAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemFangAdd {
      get { return itemFangAdd_; }
      set {
        itemFangAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_FangSub" field.</summary>
    public const int ItemFangSubFieldNumber = 65;
    private string itemFangSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemFangSub {
      get { return itemFangSub_; }
      set {
        itemFangSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_SuAdd" field.</summary>
    public const int ItemSuAddFieldNumber = 66;
    private string itemSuAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemSuAdd {
      get { return itemSuAdd_; }
      set {
        itemSuAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_SuSub" field.</summary>
    public const int ItemSuSubFieldNumber = 67;
    private string itemSuSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemSuSub {
      get { return itemSuSub_; }
      set {
        itemSuSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_YunAdd" field.</summary>
    public const int ItemYunAddFieldNumber = 68;
    private string itemYunAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemYunAdd {
      get { return itemYunAdd_; }
      set {
        itemYunAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_YunSub" field.</summary>
    public const int ItemYunSubFieldNumber = 69;
    private string itemYunSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemYunSub {
      get { return itemYunSub_; }
      set {
        itemYunSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_PinSi" field.</summary>
    public const int ItemPinSiFieldNumber = 70;
    private string itemPinSi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemPinSi {
      get { return itemPinSi_; }
      set {
        itemPinSi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_SiWang" field.</summary>
    public const int ItemSiWangFieldNumber = 71;
    private string itemSiWang_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemSiWang {
      get { return itemSiWang_; }
      set {
        itemSiWang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_BiDu" field.</summary>
    public const int ItemBiDuFieldNumber = 72;
    private string itemBiDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemBiDu {
      get { return itemBiDu_; }
      set {
        itemBiDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_BiXie" field.</summary>
    public const int ItemBiXieFieldNumber = 73;
    private string itemBiXie_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemBiXie {
      get { return itemBiXie_; }
      set {
        itemBiXie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_TuiMo" field.</summary>
    public const int ItemTuiMoFieldNumber = 74;
    private string itemTuiMo_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemTuiMo {
      get { return itemTuiMo_; }
      set {
        itemTuiMo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_ShenYan" field.</summary>
    public const int ItemShenYanFieldNumber = 75;
    private string itemShenYan_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemShenYan {
      get { return itemShenYan_; }
      set {
        itemShenYan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_JingJin" field.</summary>
    public const int ItemJingJinFieldNumber = 76;
    private string itemJingJin_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemJingJin {
      get { return itemJingJin_; }
      set {
        itemJingJin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Item_Lian" field.</summary>
    public const int ItemLianFieldNumber = 77;
    private int itemLian_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemLian {
      get { return itemLian_; }
      set {
        itemLian_ = value;
      }
    }

    /// <summary>Field number for the "Item_BaoJi" field.</summary>
    public const int ItemBaoJiFieldNumber = 78;
    private int itemBaoJi_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemBaoJi {
      get { return itemBaoJi_; }
      set {
        itemBaoJi_ = value;
      }
    }

    /// <summary>Field number for the "Item_TeJi" field.</summary>
    public const int ItemTeJiFieldNumber = 79;
    private int itemTeJi_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemTeJi {
      get { return itemTeJi_; }
      set {
        itemTeJi_ = value;
      }
    }

    /// <summary>Field number for the "Item_QiSub" field.</summary>
    public const int ItemQiSubFieldNumber = 80;
    private int itemQiSub_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemQiSub {
      get { return itemQiSub_; }
      set {
        itemQiSub_ = value;
      }
    }

    /// <summary>Field number for the "Item_ShenSub" field.</summary>
    public const int ItemShenSubFieldNumber = 81;
    private int itemShenSub_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemShenSub {
      get { return itemShenSub_; }
      set {
        itemShenSub_ = value;
      }
    }

    /// <summary>Field number for the "Item_ComposeID_1" field.</summary>
    public const int ItemComposeID1FieldNumber = 82;
    private int itemComposeID1_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemComposeID1 {
      get { return itemComposeID1_; }
      set {
        itemComposeID1_ = value;
      }
    }

    /// <summary>Field number for the "Item_ComposeID_2" field.</summary>
    public const int ItemComposeID2FieldNumber = 83;
    private int itemComposeID2_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemComposeID2 {
      get { return itemComposeID2_; }
      set {
        itemComposeID2_ = value;
      }
    }

    /// <summary>Field number for the "Item_Compose_PropID" field.</summary>
    public const int ItemComposePropIDFieldNumber = 84;
    private int itemComposePropID_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemComposePropID {
      get { return itemComposePropID_; }
      set {
        itemComposePropID_ = value;
      }
    }

    /// <summary>Field number for the "Item_StoneID" field.</summary>
    public const int ItemStoneIDFieldNumber = 85;
    private int itemStoneID_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemStoneID {
      get { return itemStoneID_; }
      set {
        itemStoneID_ = value;
      }
    }

    /// <summary>Field number for the "Item_SmeltPropID" field.</summary>
    public const int ItemSmeltPropIDFieldNumber = 86;
    private int itemSmeltPropID_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSmeltPropID {
      get { return itemSmeltPropID_; }
      set {
        itemSmeltPropID_ = value;
      }
    }

    /// <summary>Field number for the "Item_SmeltPrice" field.</summary>
    public const int ItemSmeltPriceFieldNumber = 87;
    private int itemSmeltPrice_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSmeltPrice {
      get { return itemSmeltPrice_; }
      set {
        itemSmeltPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ShowInBag != other.ShowInBag) return false;
      if (Type != other.Type) return false;
      if (PrivateId != other.PrivateId) return false;
      if (Icon != other.Icon) return false;
      if (Quality != other.Quality) return false;
      if (BasePropertyId != other.BasePropertyId) return false;
      if (Remark != other.Remark) return false;
      if (Buy != other.Buy) return false;
      if (Sell != other.Sell) return false;
      if (Split != other.Split) return false;
      if (SplitNeed != other.SplitNeed) return false;
      if (Merge != other.Merge) return false;
      if (MergeNeed != other.MergeNeed) return false;
      if (ItemModelID != other.ItemModelID) return false;
      if (ItemImageID != other.ItemImageID) return false;
      if (ItemType != other.ItemType) return false;
      if (ItemTypeVal != other.ItemTypeVal) return false;
      if (ItemUseRange != other.ItemUseRange) return false;
      if (ItemUsePlace != other.ItemUsePlace) return false;
      if (ItemUseJingTian != other.ItemUseJingTian) return false;
      if (ItemUseXueJian != other.ItemUseXueJian) return false;
      if (ItemUseChangQing != other.ItemUseChangQing) return false;
      if (ItemUseLongKui != other.ItemUseLongKui) return false;
      if (ItemUseZiXuan != other.ItemUseZiXuan) return false;
      if (ItemOldVal != other.ItemOldVal) return false;
      if (ItemPrice != other.ItemPrice) return false;
      if (ItemAttShui != other.ItemAttShui) return false;
      if (ItemAttHuo != other.ItemAttHuo) return false;
      if (ItemAttFeng != other.ItemAttFeng) return false;
      if (ItemAttLei != other.ItemAttLei) return false;
      if (ItemAttTu != other.ItemAttTu) return false;
      if (ItemSpecial != other.ItemSpecial) return false;
      if (ItemEffectShui != other.ItemEffectShui) return false;
      if (ItemEffectHuo != other.ItemEffectHuo) return false;
      if (ItemEffectFeng != other.ItemEffectFeng) return false;
      if (ItemEffectLei != other.ItemEffectLei) return false;
      if (ItemEffectTu != other.ItemEffectTu) return false;
      if (ItemEffectJing != other.ItemEffectJing) return false;
      if (ItemEffectQi != other.ItemEffectQi) return false;
      if (ItemEffectShen != other.ItemEffectShen) return false;
      if (ItemEffectWu != other.ItemEffectWu) return false;
      if (ItemEffectFang != other.ItemEffectFang) return false;
      if (ItemEffectSu != other.ItemEffectSu) return false;
      if (ItemEffectYun != other.ItemEffectYun) return false;
      if (ItemShuiDu != other.ItemShuiDu) return false;
      if (ItemHuoDu != other.ItemHuoDu) return false;
      if (ItemFengDu != other.ItemFengDu) return false;
      if (ItemLeiDu != other.ItemLeiDu) return false;
      if (ItemTuDu != other.ItemTuDu) return false;
      if (ItemDing != other.ItemDing) return false;
      if (ItemFeng != other.ItemFeng) return false;
      if (ItemJin != other.ItemJin) return false;
      if (ItemMian != other.ItemMian) return false;
      if (ItemLuan != other.ItemLuan) return false;
      if (ItemKuang != other.ItemKuang) return false;
      if (ItemJing != other.ItemJing) return false;
      if (ItemBi != other.ItemBi) return false;
      if (ItemJie != other.ItemJie) return false;
      if (ItemYin != other.ItemYin) return false;
      if (ItemWuAdd != other.ItemWuAdd) return false;
      if (ItemWuSub != other.ItemWuSub) return false;
      if (ItemFangAdd != other.ItemFangAdd) return false;
      if (ItemFangSub != other.ItemFangSub) return false;
      if (ItemSuAdd != other.ItemSuAdd) return false;
      if (ItemSuSub != other.ItemSuSub) return false;
      if (ItemYunAdd != other.ItemYunAdd) return false;
      if (ItemYunSub != other.ItemYunSub) return false;
      if (ItemPinSi != other.ItemPinSi) return false;
      if (ItemSiWang != other.ItemSiWang) return false;
      if (ItemBiDu != other.ItemBiDu) return false;
      if (ItemBiXie != other.ItemBiXie) return false;
      if (ItemTuiMo != other.ItemTuiMo) return false;
      if (ItemShenYan != other.ItemShenYan) return false;
      if (ItemJingJin != other.ItemJingJin) return false;
      if (ItemLian != other.ItemLian) return false;
      if (ItemBaoJi != other.ItemBaoJi) return false;
      if (ItemTeJi != other.ItemTeJi) return false;
      if (ItemQiSub != other.ItemQiSub) return false;
      if (ItemShenSub != other.ItemShenSub) return false;
      if (ItemComposeID1 != other.ItemComposeID1) return false;
      if (ItemComposeID2 != other.ItemComposeID2) return false;
      if (ItemComposePropID != other.ItemComposePropID) return false;
      if (ItemStoneID != other.ItemStoneID) return false;
      if (ItemSmeltPropID != other.ItemSmeltPropID) return false;
      if (ItemSmeltPrice != other.ItemSmeltPrice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShowInBag != 0) hash ^= ShowInBag.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PrivateId.Length != 0) hash ^= PrivateId.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (BasePropertyId.Length != 0) hash ^= BasePropertyId.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Buy.Length != 0) hash ^= Buy.GetHashCode();
      if (Sell.Length != 0) hash ^= Sell.GetHashCode();
      if (Split.Length != 0) hash ^= Split.GetHashCode();
      if (SplitNeed.Length != 0) hash ^= SplitNeed.GetHashCode();
      if (Merge.Length != 0) hash ^= Merge.GetHashCode();
      if (MergeNeed.Length != 0) hash ^= MergeNeed.GetHashCode();
      if (ItemModelID.Length != 0) hash ^= ItemModelID.GetHashCode();
      if (ItemImageID.Length != 0) hash ^= ItemImageID.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (ItemTypeVal != 0) hash ^= ItemTypeVal.GetHashCode();
      if (ItemUseRange != 0) hash ^= ItemUseRange.GetHashCode();
      if (ItemUsePlace != 0) hash ^= ItemUsePlace.GetHashCode();
      if (ItemUseJingTian != 0) hash ^= ItemUseJingTian.GetHashCode();
      if (ItemUseXueJian != 0) hash ^= ItemUseXueJian.GetHashCode();
      if (ItemUseChangQing != 0) hash ^= ItemUseChangQing.GetHashCode();
      if (ItemUseLongKui != 0) hash ^= ItemUseLongKui.GetHashCode();
      if (ItemUseZiXuan != 0) hash ^= ItemUseZiXuan.GetHashCode();
      if (ItemOldVal != 0) hash ^= ItemOldVal.GetHashCode();
      if (ItemPrice != 0) hash ^= ItemPrice.GetHashCode();
      if (ItemAttShui != 0) hash ^= ItemAttShui.GetHashCode();
      if (ItemAttHuo != 0) hash ^= ItemAttHuo.GetHashCode();
      if (ItemAttFeng != 0) hash ^= ItemAttFeng.GetHashCode();
      if (ItemAttLei != 0) hash ^= ItemAttLei.GetHashCode();
      if (ItemAttTu != 0) hash ^= ItemAttTu.GetHashCode();
      if (ItemSpecial != 0) hash ^= ItemSpecial.GetHashCode();
      if (ItemEffectShui.Length != 0) hash ^= ItemEffectShui.GetHashCode();
      if (ItemEffectHuo.Length != 0) hash ^= ItemEffectHuo.GetHashCode();
      if (ItemEffectFeng.Length != 0) hash ^= ItemEffectFeng.GetHashCode();
      if (ItemEffectLei.Length != 0) hash ^= ItemEffectLei.GetHashCode();
      if (ItemEffectTu.Length != 0) hash ^= ItemEffectTu.GetHashCode();
      if (ItemEffectJing.Length != 0) hash ^= ItemEffectJing.GetHashCode();
      if (ItemEffectQi.Length != 0) hash ^= ItemEffectQi.GetHashCode();
      if (ItemEffectShen.Length != 0) hash ^= ItemEffectShen.GetHashCode();
      if (ItemEffectWu.Length != 0) hash ^= ItemEffectWu.GetHashCode();
      if (ItemEffectFang.Length != 0) hash ^= ItemEffectFang.GetHashCode();
      if (ItemEffectSu.Length != 0) hash ^= ItemEffectSu.GetHashCode();
      if (ItemEffectYun.Length != 0) hash ^= ItemEffectYun.GetHashCode();
      if (ItemShuiDu.Length != 0) hash ^= ItemShuiDu.GetHashCode();
      if (ItemHuoDu.Length != 0) hash ^= ItemHuoDu.GetHashCode();
      if (ItemFengDu.Length != 0) hash ^= ItemFengDu.GetHashCode();
      if (ItemLeiDu.Length != 0) hash ^= ItemLeiDu.GetHashCode();
      if (ItemTuDu.Length != 0) hash ^= ItemTuDu.GetHashCode();
      if (ItemDing.Length != 0) hash ^= ItemDing.GetHashCode();
      if (ItemFeng.Length != 0) hash ^= ItemFeng.GetHashCode();
      if (ItemJin.Length != 0) hash ^= ItemJin.GetHashCode();
      if (ItemMian.Length != 0) hash ^= ItemMian.GetHashCode();
      if (ItemLuan.Length != 0) hash ^= ItemLuan.GetHashCode();
      if (ItemKuang.Length != 0) hash ^= ItemKuang.GetHashCode();
      if (ItemJing.Length != 0) hash ^= ItemJing.GetHashCode();
      if (ItemBi.Length != 0) hash ^= ItemBi.GetHashCode();
      if (ItemJie.Length != 0) hash ^= ItemJie.GetHashCode();
      if (ItemYin.Length != 0) hash ^= ItemYin.GetHashCode();
      if (ItemWuAdd.Length != 0) hash ^= ItemWuAdd.GetHashCode();
      if (ItemWuSub.Length != 0) hash ^= ItemWuSub.GetHashCode();
      if (ItemFangAdd.Length != 0) hash ^= ItemFangAdd.GetHashCode();
      if (ItemFangSub.Length != 0) hash ^= ItemFangSub.GetHashCode();
      if (ItemSuAdd.Length != 0) hash ^= ItemSuAdd.GetHashCode();
      if (ItemSuSub.Length != 0) hash ^= ItemSuSub.GetHashCode();
      if (ItemYunAdd.Length != 0) hash ^= ItemYunAdd.GetHashCode();
      if (ItemYunSub.Length != 0) hash ^= ItemYunSub.GetHashCode();
      if (ItemPinSi.Length != 0) hash ^= ItemPinSi.GetHashCode();
      if (ItemSiWang.Length != 0) hash ^= ItemSiWang.GetHashCode();
      if (ItemBiDu.Length != 0) hash ^= ItemBiDu.GetHashCode();
      if (ItemBiXie.Length != 0) hash ^= ItemBiXie.GetHashCode();
      if (ItemTuiMo.Length != 0) hash ^= ItemTuiMo.GetHashCode();
      if (ItemShenYan.Length != 0) hash ^= ItemShenYan.GetHashCode();
      if (ItemJingJin.Length != 0) hash ^= ItemJingJin.GetHashCode();
      if (ItemLian != 0) hash ^= ItemLian.GetHashCode();
      if (ItemBaoJi != 0) hash ^= ItemBaoJi.GetHashCode();
      if (ItemTeJi != 0) hash ^= ItemTeJi.GetHashCode();
      if (ItemQiSub != 0) hash ^= ItemQiSub.GetHashCode();
      if (ItemShenSub != 0) hash ^= ItemShenSub.GetHashCode();
      if (ItemComposeID1 != 0) hash ^= ItemComposeID1.GetHashCode();
      if (ItemComposeID2 != 0) hash ^= ItemComposeID2.GetHashCode();
      if (ItemComposePropID != 0) hash ^= ItemComposePropID.GetHashCode();
      if (ItemStoneID != 0) hash ^= ItemStoneID.GetHashCode();
      if (ItemSmeltPropID != 0) hash ^= ItemSmeltPropID.GetHashCode();
      if (ItemSmeltPrice != 0) hash ^= ItemSmeltPrice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ShowInBag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShowInBag);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (PrivateId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrivateId);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (Quality != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Quality);
      }
      if (BasePropertyId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BasePropertyId);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Remark);
      }
      if (Buy.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Buy);
      }
      if (Sell.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Sell);
      }
      if (Split.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Split);
      }
      if (SplitNeed.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SplitNeed);
      }
      if (Merge.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Merge);
      }
      if (MergeNeed.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MergeNeed);
      }
      if (ItemModelID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ItemModelID);
      }
      if (ItemImageID.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ItemImageID);
      }
      if (ItemType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ItemType);
      }
      if (ItemTypeVal != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ItemTypeVal);
      }
      if (ItemUseRange != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ItemUseRange);
      }
      if (ItemUsePlace != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ItemUsePlace);
      }
      if (ItemUseJingTian != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ItemUseJingTian);
      }
      if (ItemUseXueJian != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ItemUseXueJian);
      }
      if (ItemUseChangQing != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(ItemUseChangQing);
      }
      if (ItemUseLongKui != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ItemUseLongKui);
      }
      if (ItemUseZiXuan != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ItemUseZiXuan);
      }
      if (ItemOldVal != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ItemOldVal);
      }
      if (ItemPrice != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ItemPrice);
      }
      if (ItemAttShui != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ItemAttShui);
      }
      if (ItemAttHuo != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ItemAttHuo);
      }
      if (ItemAttFeng != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ItemAttFeng);
      }
      if (ItemAttLei != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(ItemAttLei);
      }
      if (ItemAttTu != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ItemAttTu);
      }
      if (ItemSpecial != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ItemSpecial);
      }
      if (ItemEffectShui.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(ItemEffectShui);
      }
      if (ItemEffectHuo.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ItemEffectHuo);
      }
      if (ItemEffectFeng.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ItemEffectFeng);
      }
      if (ItemEffectLei.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ItemEffectLei);
      }
      if (ItemEffectTu.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ItemEffectTu);
      }
      if (ItemEffectJing.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(ItemEffectJing);
      }
      if (ItemEffectQi.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(ItemEffectQi);
      }
      if (ItemEffectShen.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(ItemEffectShen);
      }
      if (ItemEffectWu.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(ItemEffectWu);
      }
      if (ItemEffectFang.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(ItemEffectFang);
      }
      if (ItemEffectSu.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(ItemEffectSu);
      }
      if (ItemEffectYun.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(ItemEffectYun);
      }
      if (ItemShuiDu.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(ItemShuiDu);
      }
      if (ItemHuoDu.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(ItemHuoDu);
      }
      if (ItemFengDu.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(ItemFengDu);
      }
      if (ItemLeiDu.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(ItemLeiDu);
      }
      if (ItemTuDu.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(ItemTuDu);
      }
      if (ItemDing.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(ItemDing);
      }
      if (ItemFeng.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(ItemFeng);
      }
      if (ItemJin.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(ItemJin);
      }
      if (ItemMian.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(ItemMian);
      }
      if (ItemLuan.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(ItemLuan);
      }
      if (ItemKuang.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(ItemKuang);
      }
      if (ItemJing.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(ItemJing);
      }
      if (ItemBi.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(ItemBi);
      }
      if (ItemJie.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(ItemJie);
      }
      if (ItemYin.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(ItemYin);
      }
      if (ItemWuAdd.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(ItemWuAdd);
      }
      if (ItemWuSub.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(ItemWuSub);
      }
      if (ItemFangAdd.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(ItemFangAdd);
      }
      if (ItemFangSub.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteString(ItemFangSub);
      }
      if (ItemSuAdd.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(ItemSuAdd);
      }
      if (ItemSuSub.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(ItemSuSub);
      }
      if (ItemYunAdd.Length != 0) {
        output.WriteRawTag(162, 4);
        output.WriteString(ItemYunAdd);
      }
      if (ItemYunSub.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(ItemYunSub);
      }
      if (ItemPinSi.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(ItemPinSi);
      }
      if (ItemSiWang.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(ItemSiWang);
      }
      if (ItemBiDu.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(ItemBiDu);
      }
      if (ItemBiXie.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(ItemBiXie);
      }
      if (ItemTuiMo.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(ItemTuiMo);
      }
      if (ItemShenYan.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(ItemShenYan);
      }
      if (ItemJingJin.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(ItemJingJin);
      }
      if (ItemLian != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(ItemLian);
      }
      if (ItemBaoJi != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(ItemBaoJi);
      }
      if (ItemTeJi != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(ItemTeJi);
      }
      if (ItemQiSub != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(ItemQiSub);
      }
      if (ItemShenSub != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(ItemShenSub);
      }
      if (ItemComposeID1 != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(ItemComposeID1);
      }
      if (ItemComposeID2 != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(ItemComposeID2);
      }
      if (ItemComposePropID != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(ItemComposePropID);
      }
      if (ItemStoneID != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(ItemStoneID);
      }
      if (ItemSmeltPropID != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(ItemSmeltPropID);
      }
      if (ItemSmeltPrice != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(ItemSmeltPrice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShowInBag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowInBag);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PrivateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (BasePropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePropertyId);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Buy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Buy);
      }
      if (Sell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sell);
      }
      if (Split.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Split);
      }
      if (SplitNeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SplitNeed);
      }
      if (Merge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Merge);
      }
      if (MergeNeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MergeNeed);
      }
      if (ItemModelID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemModelID);
      }
      if (ItemImageID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemImageID);
      }
      if (ItemType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
      }
      if (ItemTypeVal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemTypeVal);
      }
      if (ItemUseRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUseRange);
      }
      if (ItemUsePlace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUsePlace);
      }
      if (ItemUseJingTian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUseJingTian);
      }
      if (ItemUseXueJian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUseXueJian);
      }
      if (ItemUseChangQing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUseChangQing);
      }
      if (ItemUseLongKui != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUseLongKui);
      }
      if (ItemUseZiXuan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemUseZiXuan);
      }
      if (ItemOldVal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemOldVal);
      }
      if (ItemPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemPrice);
      }
      if (ItemAttShui != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemAttShui);
      }
      if (ItemAttHuo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemAttHuo);
      }
      if (ItemAttFeng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemAttFeng);
      }
      if (ItemAttLei != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemAttLei);
      }
      if (ItemAttTu != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemAttTu);
      }
      if (ItemSpecial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemSpecial);
      }
      if (ItemEffectShui.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectShui);
      }
      if (ItemEffectHuo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectHuo);
      }
      if (ItemEffectFeng.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectFeng);
      }
      if (ItemEffectLei.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectLei);
      }
      if (ItemEffectTu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectTu);
      }
      if (ItemEffectJing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectJing);
      }
      if (ItemEffectQi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectQi);
      }
      if (ItemEffectShen.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectShen);
      }
      if (ItemEffectWu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectWu);
      }
      if (ItemEffectFang.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectFang);
      }
      if (ItemEffectSu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectSu);
      }
      if (ItemEffectYun.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemEffectYun);
      }
      if (ItemShuiDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemShuiDu);
      }
      if (ItemHuoDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemHuoDu);
      }
      if (ItemFengDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemFengDu);
      }
      if (ItemLeiDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemLeiDu);
      }
      if (ItemTuDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemTuDu);
      }
      if (ItemDing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemDing);
      }
      if (ItemFeng.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemFeng);
      }
      if (ItemJin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemJin);
      }
      if (ItemMian.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemMian);
      }
      if (ItemLuan.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemLuan);
      }
      if (ItemKuang.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemKuang);
      }
      if (ItemJing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemJing);
      }
      if (ItemBi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemBi);
      }
      if (ItemJie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemJie);
      }
      if (ItemYin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemYin);
      }
      if (ItemWuAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemWuAdd);
      }
      if (ItemWuSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemWuSub);
      }
      if (ItemFangAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemFangAdd);
      }
      if (ItemFangSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemFangSub);
      }
      if (ItemSuAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemSuAdd);
      }
      if (ItemSuSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemSuSub);
      }
      if (ItemYunAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemYunAdd);
      }
      if (ItemYunSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemYunSub);
      }
      if (ItemPinSi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemPinSi);
      }
      if (ItemSiWang.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemSiWang);
      }
      if (ItemBiDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemBiDu);
      }
      if (ItemBiXie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemBiXie);
      }
      if (ItemTuiMo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemTuiMo);
      }
      if (ItemShenYan.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemShenYan);
      }
      if (ItemJingJin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemJingJin);
      }
      if (ItemLian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemLian);
      }
      if (ItemBaoJi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemBaoJi);
      }
      if (ItemTeJi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemTeJi);
      }
      if (ItemQiSub != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemQiSub);
      }
      if (ItemShenSub != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemShenSub);
      }
      if (ItemComposeID1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemComposeID1);
      }
      if (ItemComposeID2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemComposeID2);
      }
      if (ItemComposePropID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemComposePropID);
      }
      if (ItemStoneID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemStoneID);
      }
      if (ItemSmeltPropID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemSmeltPropID);
      }
      if (ItemSmeltPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemSmeltPrice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShowInBag != 0) {
        ShowInBag = other.ShowInBag;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PrivateId.Length != 0) {
        PrivateId = other.PrivateId;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.BasePropertyId.Length != 0) {
        BasePropertyId = other.BasePropertyId;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Buy.Length != 0) {
        Buy = other.Buy;
      }
      if (other.Sell.Length != 0) {
        Sell = other.Sell;
      }
      if (other.Split.Length != 0) {
        Split = other.Split;
      }
      if (other.SplitNeed.Length != 0) {
        SplitNeed = other.SplitNeed;
      }
      if (other.Merge.Length != 0) {
        Merge = other.Merge;
      }
      if (other.MergeNeed.Length != 0) {
        MergeNeed = other.MergeNeed;
      }
      if (other.ItemModelID.Length != 0) {
        ItemModelID = other.ItemModelID;
      }
      if (other.ItemImageID.Length != 0) {
        ItemImageID = other.ItemImageID;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.ItemTypeVal != 0) {
        ItemTypeVal = other.ItemTypeVal;
      }
      if (other.ItemUseRange != 0) {
        ItemUseRange = other.ItemUseRange;
      }
      if (other.ItemUsePlace != 0) {
        ItemUsePlace = other.ItemUsePlace;
      }
      if (other.ItemUseJingTian != 0) {
        ItemUseJingTian = other.ItemUseJingTian;
      }
      if (other.ItemUseXueJian != 0) {
        ItemUseXueJian = other.ItemUseXueJian;
      }
      if (other.ItemUseChangQing != 0) {
        ItemUseChangQing = other.ItemUseChangQing;
      }
      if (other.ItemUseLongKui != 0) {
        ItemUseLongKui = other.ItemUseLongKui;
      }
      if (other.ItemUseZiXuan != 0) {
        ItemUseZiXuan = other.ItemUseZiXuan;
      }
      if (other.ItemOldVal != 0) {
        ItemOldVal = other.ItemOldVal;
      }
      if (other.ItemPrice != 0) {
        ItemPrice = other.ItemPrice;
      }
      if (other.ItemAttShui != 0) {
        ItemAttShui = other.ItemAttShui;
      }
      if (other.ItemAttHuo != 0) {
        ItemAttHuo = other.ItemAttHuo;
      }
      if (other.ItemAttFeng != 0) {
        ItemAttFeng = other.ItemAttFeng;
      }
      if (other.ItemAttLei != 0) {
        ItemAttLei = other.ItemAttLei;
      }
      if (other.ItemAttTu != 0) {
        ItemAttTu = other.ItemAttTu;
      }
      if (other.ItemSpecial != 0) {
        ItemSpecial = other.ItemSpecial;
      }
      if (other.ItemEffectShui.Length != 0) {
        ItemEffectShui = other.ItemEffectShui;
      }
      if (other.ItemEffectHuo.Length != 0) {
        ItemEffectHuo = other.ItemEffectHuo;
      }
      if (other.ItemEffectFeng.Length != 0) {
        ItemEffectFeng = other.ItemEffectFeng;
      }
      if (other.ItemEffectLei.Length != 0) {
        ItemEffectLei = other.ItemEffectLei;
      }
      if (other.ItemEffectTu.Length != 0) {
        ItemEffectTu = other.ItemEffectTu;
      }
      if (other.ItemEffectJing.Length != 0) {
        ItemEffectJing = other.ItemEffectJing;
      }
      if (other.ItemEffectQi.Length != 0) {
        ItemEffectQi = other.ItemEffectQi;
      }
      if (other.ItemEffectShen.Length != 0) {
        ItemEffectShen = other.ItemEffectShen;
      }
      if (other.ItemEffectWu.Length != 0) {
        ItemEffectWu = other.ItemEffectWu;
      }
      if (other.ItemEffectFang.Length != 0) {
        ItemEffectFang = other.ItemEffectFang;
      }
      if (other.ItemEffectSu.Length != 0) {
        ItemEffectSu = other.ItemEffectSu;
      }
      if (other.ItemEffectYun.Length != 0) {
        ItemEffectYun = other.ItemEffectYun;
      }
      if (other.ItemShuiDu.Length != 0) {
        ItemShuiDu = other.ItemShuiDu;
      }
      if (other.ItemHuoDu.Length != 0) {
        ItemHuoDu = other.ItemHuoDu;
      }
      if (other.ItemFengDu.Length != 0) {
        ItemFengDu = other.ItemFengDu;
      }
      if (other.ItemLeiDu.Length != 0) {
        ItemLeiDu = other.ItemLeiDu;
      }
      if (other.ItemTuDu.Length != 0) {
        ItemTuDu = other.ItemTuDu;
      }
      if (other.ItemDing.Length != 0) {
        ItemDing = other.ItemDing;
      }
      if (other.ItemFeng.Length != 0) {
        ItemFeng = other.ItemFeng;
      }
      if (other.ItemJin.Length != 0) {
        ItemJin = other.ItemJin;
      }
      if (other.ItemMian.Length != 0) {
        ItemMian = other.ItemMian;
      }
      if (other.ItemLuan.Length != 0) {
        ItemLuan = other.ItemLuan;
      }
      if (other.ItemKuang.Length != 0) {
        ItemKuang = other.ItemKuang;
      }
      if (other.ItemJing.Length != 0) {
        ItemJing = other.ItemJing;
      }
      if (other.ItemBi.Length != 0) {
        ItemBi = other.ItemBi;
      }
      if (other.ItemJie.Length != 0) {
        ItemJie = other.ItemJie;
      }
      if (other.ItemYin.Length != 0) {
        ItemYin = other.ItemYin;
      }
      if (other.ItemWuAdd.Length != 0) {
        ItemWuAdd = other.ItemWuAdd;
      }
      if (other.ItemWuSub.Length != 0) {
        ItemWuSub = other.ItemWuSub;
      }
      if (other.ItemFangAdd.Length != 0) {
        ItemFangAdd = other.ItemFangAdd;
      }
      if (other.ItemFangSub.Length != 0) {
        ItemFangSub = other.ItemFangSub;
      }
      if (other.ItemSuAdd.Length != 0) {
        ItemSuAdd = other.ItemSuAdd;
      }
      if (other.ItemSuSub.Length != 0) {
        ItemSuSub = other.ItemSuSub;
      }
      if (other.ItemYunAdd.Length != 0) {
        ItemYunAdd = other.ItemYunAdd;
      }
      if (other.ItemYunSub.Length != 0) {
        ItemYunSub = other.ItemYunSub;
      }
      if (other.ItemPinSi.Length != 0) {
        ItemPinSi = other.ItemPinSi;
      }
      if (other.ItemSiWang.Length != 0) {
        ItemSiWang = other.ItemSiWang;
      }
      if (other.ItemBiDu.Length != 0) {
        ItemBiDu = other.ItemBiDu;
      }
      if (other.ItemBiXie.Length != 0) {
        ItemBiXie = other.ItemBiXie;
      }
      if (other.ItemTuiMo.Length != 0) {
        ItemTuiMo = other.ItemTuiMo;
      }
      if (other.ItemShenYan.Length != 0) {
        ItemShenYan = other.ItemShenYan;
      }
      if (other.ItemJingJin.Length != 0) {
        ItemJingJin = other.ItemJingJin;
      }
      if (other.ItemLian != 0) {
        ItemLian = other.ItemLian;
      }
      if (other.ItemBaoJi != 0) {
        ItemBaoJi = other.ItemBaoJi;
      }
      if (other.ItemTeJi != 0) {
        ItemTeJi = other.ItemTeJi;
      }
      if (other.ItemQiSub != 0) {
        ItemQiSub = other.ItemQiSub;
      }
      if (other.ItemShenSub != 0) {
        ItemShenSub = other.ItemShenSub;
      }
      if (other.ItemComposeID1 != 0) {
        ItemComposeID1 = other.ItemComposeID1;
      }
      if (other.ItemComposeID2 != 0) {
        ItemComposeID2 = other.ItemComposeID2;
      }
      if (other.ItemComposePropID != 0) {
        ItemComposePropID = other.ItemComposePropID;
      }
      if (other.ItemStoneID != 0) {
        ItemStoneID = other.ItemStoneID;
      }
      if (other.ItemSmeltPropID != 0) {
        ItemSmeltPropID = other.ItemSmeltPropID;
      }
      if (other.ItemSmeltPrice != 0) {
        ItemSmeltPrice = other.ItemSmeltPrice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            ShowInBag = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            PrivateId = input.ReadString();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
          case 56: {
            Quality = input.ReadInt32();
            break;
          }
          case 66: {
            BasePropertyId = input.ReadString();
            break;
          }
          case 74: {
            Remark = input.ReadString();
            break;
          }
          case 82: {
            Buy = input.ReadString();
            break;
          }
          case 90: {
            Sell = input.ReadString();
            break;
          }
          case 98: {
            Split = input.ReadString();
            break;
          }
          case 106: {
            SplitNeed = input.ReadString();
            break;
          }
          case 114: {
            Merge = input.ReadString();
            break;
          }
          case 122: {
            MergeNeed = input.ReadString();
            break;
          }
          case 130: {
            ItemModelID = input.ReadString();
            break;
          }
          case 138: {
            ItemImageID = input.ReadString();
            break;
          }
          case 144: {
            ItemType = input.ReadInt32();
            break;
          }
          case 152: {
            ItemTypeVal = input.ReadInt32();
            break;
          }
          case 160: {
            ItemUseRange = input.ReadInt32();
            break;
          }
          case 168: {
            ItemUsePlace = input.ReadInt32();
            break;
          }
          case 176: {
            ItemUseJingTian = input.ReadInt32();
            break;
          }
          case 184: {
            ItemUseXueJian = input.ReadInt32();
            break;
          }
          case 192: {
            ItemUseChangQing = input.ReadInt32();
            break;
          }
          case 200: {
            ItemUseLongKui = input.ReadInt32();
            break;
          }
          case 208: {
            ItemUseZiXuan = input.ReadInt32();
            break;
          }
          case 216: {
            ItemOldVal = input.ReadInt32();
            break;
          }
          case 224: {
            ItemPrice = input.ReadInt32();
            break;
          }
          case 232: {
            ItemAttShui = input.ReadInt32();
            break;
          }
          case 240: {
            ItemAttHuo = input.ReadInt32();
            break;
          }
          case 248: {
            ItemAttFeng = input.ReadInt32();
            break;
          }
          case 256: {
            ItemAttLei = input.ReadInt32();
            break;
          }
          case 264: {
            ItemAttTu = input.ReadInt32();
            break;
          }
          case 272: {
            ItemSpecial = input.ReadInt32();
            break;
          }
          case 282: {
            ItemEffectShui = input.ReadString();
            break;
          }
          case 290: {
            ItemEffectHuo = input.ReadString();
            break;
          }
          case 298: {
            ItemEffectFeng = input.ReadString();
            break;
          }
          case 306: {
            ItemEffectLei = input.ReadString();
            break;
          }
          case 314: {
            ItemEffectTu = input.ReadString();
            break;
          }
          case 322: {
            ItemEffectJing = input.ReadString();
            break;
          }
          case 330: {
            ItemEffectQi = input.ReadString();
            break;
          }
          case 338: {
            ItemEffectShen = input.ReadString();
            break;
          }
          case 346: {
            ItemEffectWu = input.ReadString();
            break;
          }
          case 354: {
            ItemEffectFang = input.ReadString();
            break;
          }
          case 362: {
            ItemEffectSu = input.ReadString();
            break;
          }
          case 370: {
            ItemEffectYun = input.ReadString();
            break;
          }
          case 378: {
            ItemShuiDu = input.ReadString();
            break;
          }
          case 386: {
            ItemHuoDu = input.ReadString();
            break;
          }
          case 394: {
            ItemFengDu = input.ReadString();
            break;
          }
          case 402: {
            ItemLeiDu = input.ReadString();
            break;
          }
          case 410: {
            ItemTuDu = input.ReadString();
            break;
          }
          case 418: {
            ItemDing = input.ReadString();
            break;
          }
          case 426: {
            ItemFeng = input.ReadString();
            break;
          }
          case 434: {
            ItemJin = input.ReadString();
            break;
          }
          case 442: {
            ItemMian = input.ReadString();
            break;
          }
          case 450: {
            ItemLuan = input.ReadString();
            break;
          }
          case 458: {
            ItemKuang = input.ReadString();
            break;
          }
          case 466: {
            ItemJing = input.ReadString();
            break;
          }
          case 474: {
            ItemBi = input.ReadString();
            break;
          }
          case 482: {
            ItemJie = input.ReadString();
            break;
          }
          case 490: {
            ItemYin = input.ReadString();
            break;
          }
          case 498: {
            ItemWuAdd = input.ReadString();
            break;
          }
          case 506: {
            ItemWuSub = input.ReadString();
            break;
          }
          case 514: {
            ItemFangAdd = input.ReadString();
            break;
          }
          case 522: {
            ItemFangSub = input.ReadString();
            break;
          }
          case 530: {
            ItemSuAdd = input.ReadString();
            break;
          }
          case 538: {
            ItemSuSub = input.ReadString();
            break;
          }
          case 546: {
            ItemYunAdd = input.ReadString();
            break;
          }
          case 554: {
            ItemYunSub = input.ReadString();
            break;
          }
          case 562: {
            ItemPinSi = input.ReadString();
            break;
          }
          case 570: {
            ItemSiWang = input.ReadString();
            break;
          }
          case 578: {
            ItemBiDu = input.ReadString();
            break;
          }
          case 586: {
            ItemBiXie = input.ReadString();
            break;
          }
          case 594: {
            ItemTuiMo = input.ReadString();
            break;
          }
          case 602: {
            ItemShenYan = input.ReadString();
            break;
          }
          case 610: {
            ItemJingJin = input.ReadString();
            break;
          }
          case 616: {
            ItemLian = input.ReadInt32();
            break;
          }
          case 624: {
            ItemBaoJi = input.ReadInt32();
            break;
          }
          case 632: {
            ItemTeJi = input.ReadInt32();
            break;
          }
          case 640: {
            ItemQiSub = input.ReadInt32();
            break;
          }
          case 648: {
            ItemShenSub = input.ReadInt32();
            break;
          }
          case 656: {
            ItemComposeID1 = input.ReadInt32();
            break;
          }
          case 664: {
            ItemComposeID2 = input.ReadInt32();
            break;
          }
          case 672: {
            ItemComposePropID = input.ReadInt32();
            break;
          }
          case 680: {
            ItemStoneID = input.ReadInt32();
            break;
          }
          case 688: {
            ItemSmeltPropID = input.ReadInt32();
            break;
          }
          case 696: {
            ItemSmeltPrice = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FxInfo : pb::IMessage<FxInfo> {
    private static readonly pb::MessageParser<FxInfo> _parser = new pb::MessageParser<FxInfo>(() => new FxInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FxInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FxInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FxInfo(FxInfo other) : this() {
      id_ = other.id_;
      path_ = other.path_;
      bindPath_ = other.bindPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FxInfo Clone() {
      return new FxInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    ///  路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bindPath" field.</summary>
    public const int BindPathFieldNumber = 3;
    private string bindPath_ = "";
    /// <summary>
    ///  路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BindPath {
      get { return bindPath_; }
      set {
        bindPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FxInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FxInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      if (BindPath != other.BindPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (BindPath.Length != 0) hash ^= BindPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (BindPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BindPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (BindPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BindPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FxInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.BindPath.Length != 0) {
        BindPath = other.BindPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            BindPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuideInfo : pb::IMessage<GuideInfo> {
    private static readonly pb::MessageParser<GuideInfo> _parser = new pb::MessageParser<GuideInfo>(() => new GuideInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo(GuideInfo other) : this() {
      id_ = other.id_;
      triggerCondition_ = other.triggerCondition_;
      path_ = other.path_;
      parent_ = other.parent_;
      delayTime_ = other.delayTime_;
      triggerRadius_ = other.triggerRadius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo Clone() {
      return new GuideInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "triggerCondition" field.</summary>
    public const int TriggerConditionFieldNumber = 2;
    private int triggerCondition_;
    /// <summary>
    ///  触发此引导条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerCondition {
      get { return triggerCondition_; }
      set {
        triggerCondition_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    /// <summary>
    ///  触发按钮路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 4;
    private int parent_;
    /// <summary>
    ///  要复制的按钮的父级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "delayTime" field.</summary>
    public const int DelayTimeFieldNumber = 5;
    private float delayTime_;
    /// <summary>
    ///  到下一步延迟时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    /// <summary>Field number for the "triggerRadius" field.</summary>
    public const int TriggerRadiusFieldNumber = 6;
    private int triggerRadius_;
    /// <summary>
    ///  触发区域半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerRadius {
      get { return triggerRadius_; }
      set {
        triggerRadius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TriggerCondition != other.TriggerCondition) return false;
      if (Path != other.Path) return false;
      if (Parent != other.Parent) return false;
      if (DelayTime != other.DelayTime) return false;
      if (TriggerRadius != other.TriggerRadius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TriggerCondition != 0) hash ^= TriggerCondition.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Parent != 0) hash ^= Parent.GetHashCode();
      if (DelayTime != 0F) hash ^= DelayTime.GetHashCode();
      if (TriggerRadius != 0) hash ^= TriggerRadius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TriggerCondition != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TriggerCondition);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (Parent != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Parent);
      }
      if (DelayTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DelayTime);
      }
      if (TriggerRadius != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TriggerRadius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TriggerCondition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerCondition);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Parent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parent);
      }
      if (DelayTime != 0F) {
        size += 1 + 4;
      }
      if (TriggerRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerRadius);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TriggerCondition != 0) {
        TriggerCondition = other.TriggerCondition;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Parent != 0) {
        Parent = other.Parent;
      }
      if (other.DelayTime != 0F) {
        DelayTime = other.DelayTime;
      }
      if (other.TriggerRadius != 0) {
        TriggerRadius = other.TriggerRadius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            TriggerCondition = input.ReadInt32();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 32: {
            Parent = input.ReadInt32();
            break;
          }
          case 45: {
            DelayTime = input.ReadFloat();
            break;
          }
          case 48: {
            TriggerRadius = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroInfo : pb::IMessage<HeroInfo> {
    private static readonly pb::MessageParser<HeroInfo> _parser = new pb::MessageParser<HeroInfo>(() => new HeroInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroInfo(HeroInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      singleName_ = other.singleName_;
      prefabPath_ = other.prefabPath_;
      skills_ = other.skills_;
      useType_ = other.useType_;
      defaultOpen_ = other.defaultOpen_;
      openNeed_ = other.openNeed_;
      basePropertyId_ = other.basePropertyId_;
      star_ = other.star_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroInfo Clone() {
      return new HeroInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "singleName" field.</summary>
    public const int SingleNameFieldNumber = 3;
    private string singleName_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingleName {
      get { return singleName_; }
      set {
        singleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefabPath" field.</summary>
    public const int PrefabPathFieldNumber = 4;
    private string prefabPath_ = "";
    /// <summary>
    ///  预制件路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabPath {
      get { return prefabPath_; }
      set {
        prefabPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 5;
    private string skills_ = "";
    /// <summary>
    ///  技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Skills {
      get { return skills_; }
      set {
        skills_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "useType" field.</summary>
    public const int UseTypeFieldNumber = 6;
    private int useType_;
    /// <summary>
    ///  使用用途(1:true)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseType {
      get { return useType_; }
      set {
        useType_ = value;
      }
    }

    /// <summary>Field number for the "defaultOpen" field.</summary>
    public const int DefaultOpenFieldNumber = 7;
    private int defaultOpen_;
    /// <summary>
    ///  默认开放(1:true)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultOpen {
      get { return defaultOpen_; }
      set {
        defaultOpen_ = value;
      }
    }

    /// <summary>Field number for the "openNeed" field.</summary>
    public const int OpenNeedFieldNumber = 8;
    private string openNeed_ = "";
    /// <summary>
    ///  开放所需道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenNeed {
      get { return openNeed_; }
      set {
        openNeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basePropertyId" field.</summary>
    public const int BasePropertyIdFieldNumber = 9;
    private string basePropertyId_ = "";
    /// <summary>
    ///  基础属性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePropertyId {
      get { return basePropertyId_; }
      set {
        basePropertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 10;
    private int star_;
    /// <summary>
    ///  初始星
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SingleName != other.SingleName) return false;
      if (PrefabPath != other.PrefabPath) return false;
      if (Skills != other.Skills) return false;
      if (UseType != other.UseType) return false;
      if (DefaultOpen != other.DefaultOpen) return false;
      if (OpenNeed != other.OpenNeed) return false;
      if (BasePropertyId != other.BasePropertyId) return false;
      if (Star != other.Star) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SingleName.Length != 0) hash ^= SingleName.GetHashCode();
      if (PrefabPath.Length != 0) hash ^= PrefabPath.GetHashCode();
      if (Skills.Length != 0) hash ^= Skills.GetHashCode();
      if (UseType != 0) hash ^= UseType.GetHashCode();
      if (DefaultOpen != 0) hash ^= DefaultOpen.GetHashCode();
      if (OpenNeed.Length != 0) hash ^= OpenNeed.GetHashCode();
      if (BasePropertyId.Length != 0) hash ^= BasePropertyId.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SingleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SingleName);
      }
      if (PrefabPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrefabPath);
      }
      if (Skills.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Skills);
      }
      if (UseType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UseType);
      }
      if (DefaultOpen != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DefaultOpen);
      }
      if (OpenNeed.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OpenNeed);
      }
      if (BasePropertyId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BasePropertyId);
      }
      if (Star != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Star);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SingleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SingleName);
      }
      if (PrefabPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabPath);
      }
      if (Skills.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Skills);
      }
      if (UseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseType);
      }
      if (DefaultOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultOpen);
      }
      if (OpenNeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenNeed);
      }
      if (BasePropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePropertyId);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SingleName.Length != 0) {
        SingleName = other.SingleName;
      }
      if (other.PrefabPath.Length != 0) {
        PrefabPath = other.PrefabPath;
      }
      if (other.Skills.Length != 0) {
        Skills = other.Skills;
      }
      if (other.UseType != 0) {
        UseType = other.UseType;
      }
      if (other.DefaultOpen != 0) {
        DefaultOpen = other.DefaultOpen;
      }
      if (other.OpenNeed.Length != 0) {
        OpenNeed = other.OpenNeed;
      }
      if (other.BasePropertyId.Length != 0) {
        BasePropertyId = other.BasePropertyId;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SingleName = input.ReadString();
            break;
          }
          case 34: {
            PrefabPath = input.ReadString();
            break;
          }
          case 42: {
            Skills = input.ReadString();
            break;
          }
          case 48: {
            UseType = input.ReadInt32();
            break;
          }
          case 56: {
            DefaultOpen = input.ReadInt32();
            break;
          }
          case 66: {
            OpenNeed = input.ReadString();
            break;
          }
          case 74: {
            BasePropertyId = input.ReadString();
            break;
          }
          case 80: {
            Star = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HostInfo : pb::IMessage<HostInfo> {
    private static readonly pb::MessageParser<HostInfo> _parser = new pb::MessageParser<HostInfo>(() => new HostInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostInfo(HostInfo other) : this() {
      id_ = other.id_;
      remark_ = other.remark_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostInfo Clone() {
      return new HostInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    /// <summary>
    ///  键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Remark != other.Remark) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      showInBag_ = other.showInBag_;
      type_ = other.type_;
      privateId_ = other.privateId_;
      icon_ = other.icon_;
      quality_ = other.quality_;
      basePropertyId_ = other.basePropertyId_;
      remark_ = other.remark_;
      num_ = other.num_;
      buy_ = other.buy_;
      sell_ = other.sell_;
      split_ = other.split_;
      splitNeed_ = other.splitNeed_;
      merge_ = other.merge_;
      mergeNeed_ = other.mergeNeed_;
      getWay_ = other.getWay_;
      getWayDesc_ = other.getWayDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  道具名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showInBag" field.</summary>
    public const int ShowInBagFieldNumber = 3;
    private int showInBag_;
    /// <summary>
    ///  道具是否显示在背包中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowInBag {
      get { return showInBag_; }
      set {
        showInBag_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///  道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "privateId" field.</summary>
    public const int PrivateIdFieldNumber = 5;
    private int privateId_;
    /// <summary>
    ///  专属人物id(为零时不专属)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrivateId {
      get { return privateId_; }
      set {
        privateId_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    /// <summary>
    ///  道具图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 7;
    private int quality_;
    /// <summary>
    ///  道具品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "basePropertyId" field.</summary>
    public const int BasePropertyIdFieldNumber = 8;
    private string basePropertyId_ = "";
    /// <summary>
    ///  道具作用属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePropertyId {
      get { return basePropertyId_; }
      set {
        basePropertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 9;
    private string remark_ = "";
    /// <summary>
    ///  道具描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 10;
    private int num_;
    /// <summary>
    ///  道具默认数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "buy" field.</summary>
    public const int BuyFieldNumber = 11;
    private string buy_ = "";
    /// <summary>
    ///  买入价(消耗道具类型以及数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Buy {
      get { return buy_; }
      set {
        buy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sell" field.</summary>
    public const int SellFieldNumber = 12;
    private string sell_ = "";
    /// <summary>
    ///  卖出价(获得道具类型以及数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sell {
      get { return sell_; }
      set {
        sell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "split" field.</summary>
    public const int SplitFieldNumber = 13;
    private string split_ = "";
    /// <summary>
    ///  可分解拆分以及数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Split {
      get { return split_; }
      set {
        split_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "splitNeed" field.</summary>
    public const int SplitNeedFieldNumber = 14;
    private string splitNeed_ = "";
    /// <summary>
    ///  可分解拆分要求（其余道具信息）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SplitNeed {
      get { return splitNeed_; }
      set {
        splitNeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merge" field.</summary>
    public const int MergeFieldNumber = 15;
    private string merge_ = "";
    /// <summary>
    ///  可合成某物以及需要数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Merge {
      get { return merge_; }
      set {
        merge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mergeNeed" field.</summary>
    public const int MergeNeedFieldNumber = 16;
    private string mergeNeed_ = "";
    /// <summary>
    ///  可合成某物要求（其余道具信息）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MergeNeed {
      get { return mergeNeed_; }
      set {
        mergeNeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "getWay" field.</summary>
    public const int GetWayFieldNumber = 17;
    private string getWay_ = "";
    /// <summary>
    ///  获取途径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetWay {
      get { return getWay_; }
      set {
        getWay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "getWayDesc" field.</summary>
    public const int GetWayDescFieldNumber = 18;
    private string getWayDesc_ = "";
    /// <summary>
    ///  获取途径描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetWayDesc {
      get { return getWayDesc_; }
      set {
        getWayDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ShowInBag != other.ShowInBag) return false;
      if (Type != other.Type) return false;
      if (PrivateId != other.PrivateId) return false;
      if (Icon != other.Icon) return false;
      if (Quality != other.Quality) return false;
      if (BasePropertyId != other.BasePropertyId) return false;
      if (Remark != other.Remark) return false;
      if (Num != other.Num) return false;
      if (Buy != other.Buy) return false;
      if (Sell != other.Sell) return false;
      if (Split != other.Split) return false;
      if (SplitNeed != other.SplitNeed) return false;
      if (Merge != other.Merge) return false;
      if (MergeNeed != other.MergeNeed) return false;
      if (GetWay != other.GetWay) return false;
      if (GetWayDesc != other.GetWayDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShowInBag != 0) hash ^= ShowInBag.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PrivateId != 0) hash ^= PrivateId.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (BasePropertyId.Length != 0) hash ^= BasePropertyId.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Buy.Length != 0) hash ^= Buy.GetHashCode();
      if (Sell.Length != 0) hash ^= Sell.GetHashCode();
      if (Split.Length != 0) hash ^= Split.GetHashCode();
      if (SplitNeed.Length != 0) hash ^= SplitNeed.GetHashCode();
      if (Merge.Length != 0) hash ^= Merge.GetHashCode();
      if (MergeNeed.Length != 0) hash ^= MergeNeed.GetHashCode();
      if (GetWay.Length != 0) hash ^= GetWay.GetHashCode();
      if (GetWayDesc.Length != 0) hash ^= GetWayDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ShowInBag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShowInBag);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (PrivateId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PrivateId);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (Quality != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Quality);
      }
      if (BasePropertyId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BasePropertyId);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Remark);
      }
      if (Num != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Num);
      }
      if (Buy.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Buy);
      }
      if (Sell.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Sell);
      }
      if (Split.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Split);
      }
      if (SplitNeed.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SplitNeed);
      }
      if (Merge.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Merge);
      }
      if (MergeNeed.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(MergeNeed);
      }
      if (GetWay.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GetWay);
      }
      if (GetWayDesc.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(GetWayDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShowInBag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowInBag);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PrivateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrivateId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (BasePropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePropertyId);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Buy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Buy);
      }
      if (Sell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sell);
      }
      if (Split.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Split);
      }
      if (SplitNeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SplitNeed);
      }
      if (Merge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Merge);
      }
      if (MergeNeed.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MergeNeed);
      }
      if (GetWay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GetWay);
      }
      if (GetWayDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GetWayDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShowInBag != 0) {
        ShowInBag = other.ShowInBag;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PrivateId != 0) {
        PrivateId = other.PrivateId;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.BasePropertyId.Length != 0) {
        BasePropertyId = other.BasePropertyId;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Buy.Length != 0) {
        Buy = other.Buy;
      }
      if (other.Sell.Length != 0) {
        Sell = other.Sell;
      }
      if (other.Split.Length != 0) {
        Split = other.Split;
      }
      if (other.SplitNeed.Length != 0) {
        SplitNeed = other.SplitNeed;
      }
      if (other.Merge.Length != 0) {
        Merge = other.Merge;
      }
      if (other.MergeNeed.Length != 0) {
        MergeNeed = other.MergeNeed;
      }
      if (other.GetWay.Length != 0) {
        GetWay = other.GetWay;
      }
      if (other.GetWayDesc.Length != 0) {
        GetWayDesc = other.GetWayDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            ShowInBag = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            PrivateId = input.ReadInt32();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
          case 56: {
            Quality = input.ReadInt32();
            break;
          }
          case 66: {
            BasePropertyId = input.ReadString();
            break;
          }
          case 74: {
            Remark = input.ReadString();
            break;
          }
          case 80: {
            Num = input.ReadInt32();
            break;
          }
          case 90: {
            Buy = input.ReadString();
            break;
          }
          case 98: {
            Sell = input.ReadString();
            break;
          }
          case 106: {
            Split = input.ReadString();
            break;
          }
          case 114: {
            SplitNeed = input.ReadString();
            break;
          }
          case 122: {
            Merge = input.ReadString();
            break;
          }
          case 130: {
            MergeNeed = input.ReadString();
            break;
          }
          case 138: {
            GetWay = input.ReadString();
            break;
          }
          case 146: {
            GetWayDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LanguageInfo : pb::IMessage<LanguageInfo> {
    private static readonly pb::MessageParser<LanguageInfo> _parser = new pb::MessageParser<LanguageInfo>(() => new LanguageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageInfo(LanguageInfo other) : this() {
      id_ = other.id_;
      mono_ = other.mono_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageInfo Clone() {
      return new LanguageInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "mono" field.</summary>
    public const int MonoFieldNumber = 2;
    private string mono_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mono {
      get { return mono_; }
      set {
        mono_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Mono != other.Mono) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Mono.Length != 0) hash ^= Mono.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Mono.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mono);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Mono.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mono);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Mono.Length != 0) {
        Mono = other.Mono;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Mono = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalLanguageInfo : pb::IMessage<LocalLanguageInfo> {
    private static readonly pb::MessageParser<LocalLanguageInfo> _parser = new pb::MessageParser<LocalLanguageInfo>(() => new LocalLanguageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalLanguageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalLanguageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalLanguageInfo(LocalLanguageInfo other) : this() {
      id_ = other.id_;
      mono_ = other.mono_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalLanguageInfo Clone() {
      return new LocalLanguageInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "mono" field.</summary>
    public const int MonoFieldNumber = 2;
    private string mono_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mono {
      get { return mono_; }
      set {
        mono_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalLanguageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalLanguageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Mono != other.Mono) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Mono.Length != 0) hash ^= Mono.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Mono.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mono);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Mono.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mono);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalLanguageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Mono.Length != 0) {
        Mono = other.Mono;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Mono = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MiscInfo : pb::IMessage<MiscInfo> {
    private static readonly pb::MessageParser<MiscInfo> _parser = new pb::MessageParser<MiscInfo>(() => new MiscInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiscInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiscInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiscInfo(MiscInfo other) : this() {
      id_ = other.id_;
      remark_ = other.remark_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiscInfo Clone() {
      return new MiscInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    /// <summary>
    ///  键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiscInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiscInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Remark != other.Remark) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiscInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelInfo : pb::IMessage<ModelInfo> {
    private static readonly pb::MessageParser<ModelInfo> _parser = new pb::MessageParser<ModelInfo>(() => new ModelInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelInfo(ModelInfo other) : this() {
      id_ = other.id_;
      mType_ = other.mType_;
      mPath_ = other.mPath_;
      mName_ = other.mName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelInfo Clone() {
      return new ModelInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "mType" field.</summary>
    public const int MTypeFieldNumber = 2;
    private string mType_ = "";
    /// <summary>
    ///  资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MType {
      get { return mType_; }
      set {
        mType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mPath" field.</summary>
    public const int MPathFieldNumber = 3;
    private string mPath_ = "";
    /// <summary>
    ///  资源路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MPath {
      get { return mPath_; }
      set {
        mPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mName" field.</summary>
    public const int MNameFieldNumber = 4;
    private string mName_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MName {
      get { return mName_; }
      set {
        mName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MType != other.MType) return false;
      if (MPath != other.MPath) return false;
      if (MName != other.MName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MType.Length != 0) hash ^= MType.GetHashCode();
      if (MPath.Length != 0) hash ^= MPath.GetHashCode();
      if (MName.Length != 0) hash ^= MName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MType);
      }
      if (MPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MPath);
      }
      if (MName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MType);
      }
      if (MPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MPath);
      }
      if (MName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MType.Length != 0) {
        MType = other.MType;
      }
      if (other.MPath.Length != 0) {
        MPath = other.MPath;
      }
      if (other.MName.Length != 0) {
        MName = other.MName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            MType = input.ReadString();
            break;
          }
          case 26: {
            MPath = input.ReadString();
            break;
          }
          case 34: {
            MName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MovieInfo : pb::IMessage<MovieInfo> {
    private static readonly pb::MessageParser<MovieInfo> _parser = new pb::MessageParser<MovieInfo>(() => new MovieInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovieInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieInfo(MovieInfo other) : this() {
      id_ = other.id_;
      path_ = other.path_;
      extension_ = other.extension_;
      durtion_ = other.durtion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieInfo Clone() {
      return new MovieInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    ///  名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 3;
    private string extension_ = "";
    /// <summary>
    ///  后缀
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extension {
      get { return extension_; }
      set {
        extension_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "durtion" field.</summary>
    public const int DurtionFieldNumber = 4;
    private int durtion_;
    /// <summary>
    ///  长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durtion {
      get { return durtion_; }
      set {
        durtion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovieInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovieInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      if (Extension != other.Extension) return false;
      if (Durtion != other.Durtion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Extension.Length != 0) hash ^= Extension.GetHashCode();
      if (Durtion != 0) hash ^= Durtion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (Extension.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Extension);
      }
      if (Durtion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Durtion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Extension.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extension);
      }
      if (Durtion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durtion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovieInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Extension.Length != 0) {
        Extension = other.Extension;
      }
      if (other.Durtion != 0) {
        Durtion = other.Durtion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            Extension = input.ReadString();
            break;
          }
          case 32: {
            Durtion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenFunctionInfo : pb::IMessage<OpenFunctionInfo> {
    private static readonly pb::MessageParser<OpenFunctionInfo> _parser = new pb::MessageParser<OpenFunctionInfo>(() => new OpenFunctionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenFunctionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenFunctionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenFunctionInfo(OpenFunctionInfo other) : this() {
      id_ = other.id_;
      level_ = other.level_;
      name_ = other.name_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenFunctionInfo Clone() {
      return new OpenFunctionInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///  等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  开放的功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    /// <summary>
    ///  备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenFunctionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenFunctionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Level != other.Level) return false;
      if (Name != other.Name) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenFunctionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopGoodsInfo : pb::IMessage<ShopGoodsInfo> {
    private static readonly pb::MessageParser<ShopGoodsInfo> _parser = new pb::MessageParser<ShopGoodsInfo>(() => new ShopGoodsInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopGoodsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopGoodsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopGoodsInfo(ShopGoodsInfo other) : this() {
      id_ = other.id_;
      remark_ = other.remark_;
      type_ = other.type_;
      itemInfo_ = other.itemInfo_;
      showNum_ = other.showNum_;
      costId_ = other.costId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopGoodsInfo Clone() {
      return new ShopGoodsInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///  商店类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "itemInfo" field.</summary>
    public const int ItemInfoFieldNumber = 4;
    private string itemInfo_ = "";
    /// <summary>
    ///  放在商店内的道具类型以及默认数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemInfo {
      get { return itemInfo_; }
      set {
        itemInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showNum" field.</summary>
    public const int ShowNumFieldNumber = 5;
    private int showNum_;
    /// <summary>
    ///  随机出的显示在商店内的道具数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowNum {
      get { return showNum_; }
      set {
        showNum_ = value;
      }
    }

    /// <summary>Field number for the "costId" field.</summary>
    public const int CostIdFieldNumber = 6;
    private string costId_ = "";
    /// <summary>
    ///  消耗的货币id;（特定货币-》钻石-》金币）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostId {
      get { return costId_; }
      set {
        costId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopGoodsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopGoodsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Remark != other.Remark) return false;
      if (Type != other.Type) return false;
      if (ItemInfo != other.ItemInfo) return false;
      if (ShowNum != other.ShowNum) return false;
      if (CostId != other.CostId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ItemInfo.Length != 0) hash ^= ItemInfo.GetHashCode();
      if (ShowNum != 0) hash ^= ShowNum.GetHashCode();
      if (CostId.Length != 0) hash ^= CostId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (ItemInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ItemInfo);
      }
      if (ShowNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShowNum);
      }
      if (CostId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CostId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ItemInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemInfo);
      }
      if (ShowNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowNum);
      }
      if (CostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopGoodsInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ItemInfo.Length != 0) {
        ItemInfo = other.ItemInfo;
      }
      if (other.ShowNum != 0) {
        ShowNum = other.ShowNum;
      }
      if (other.CostId.Length != 0) {
        CostId = other.CostId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            ItemInfo = input.ReadString();
            break;
          }
          case 40: {
            ShowNum = input.ReadInt32();
            break;
          }
          case 50: {
            CostId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopInfo : pb::IMessage<ShopInfo> {
    private static readonly pb::MessageParser<ShopInfo> _parser = new pb::MessageParser<ShopInfo>(() => new ShopInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo(ShopInfo other) : this() {
      id_ = other.id_;
      remark_ = other.remark_;
      type_ = other.type_;
      itemInfo_ = other.itemInfo_;
      showNum_ = other.showNum_;
      costId_ = other.costId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo Clone() {
      return new ShopInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///  商店类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "itemInfo" field.</summary>
    public const int ItemInfoFieldNumber = 4;
    private string itemInfo_ = "";
    /// <summary>
    ///  放在商店内的道具类型以及默认数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemInfo {
      get { return itemInfo_; }
      set {
        itemInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showNum" field.</summary>
    public const int ShowNumFieldNumber = 5;
    private int showNum_;
    /// <summary>
    ///  随机出的显示在商店内的道具数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowNum {
      get { return showNum_; }
      set {
        showNum_ = value;
      }
    }

    /// <summary>Field number for the "costId" field.</summary>
    public const int CostIdFieldNumber = 6;
    private string costId_ = "";
    /// <summary>
    ///  消耗的货币id;（特定货币-》钻石-》金币）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostId {
      get { return costId_; }
      set {
        costId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Remark != other.Remark) return false;
      if (Type != other.Type) return false;
      if (ItemInfo != other.ItemInfo) return false;
      if (ShowNum != other.ShowNum) return false;
      if (CostId != other.CostId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ItemInfo.Length != 0) hash ^= ItemInfo.GetHashCode();
      if (ShowNum != 0) hash ^= ShowNum.GetHashCode();
      if (CostId.Length != 0) hash ^= CostId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (ItemInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ItemInfo);
      }
      if (ShowNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShowNum);
      }
      if (CostId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CostId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ItemInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemInfo);
      }
      if (ShowNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowNum);
      }
      if (CostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ItemInfo.Length != 0) {
        ItemInfo = other.ItemInfo;
      }
      if (other.ShowNum != 0) {
        ShowNum = other.ShowNum;
      }
      if (other.CostId.Length != 0) {
        CostId = other.CostId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            ItemInfo = input.ReadString();
            break;
          }
          case 40: {
            ShowNum = input.ReadInt32();
            break;
          }
          case 50: {
            CostId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillInfo : pb::IMessage<SkillInfo> {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo(SkillInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      remark_ = other.remark_;
      icon_ = other.icon_;
      privateId_ = other.privateId_;
      type_ = other.type_;
      openBy_ = other.openBy_;
      basePropertyId_ = other.basePropertyId_;
      skillAttShui_ = other.skillAttShui_;
      skillAttHuo_ = other.skillAttHuo_;
      skillAttFeng_ = other.skillAttFeng_;
      skillAttLei_ = other.skillAttLei_;
      skillAttTu_ = other.skillAttTu_;
      skillType_ = other.skillType_;
      userJingTian_ = other.userJingTian_;
      userXueJian_ = other.userXueJian_;
      userChangQing_ = other.userChangQing_;
      userLongKui_ = other.userLongKui_;
      userZiXuan_ = other.userZiXuan_;
      skillUseRange_ = other.skillUseRange_;
      skillConsumeQi_ = other.skillConsumeQi_;
      skillConsumeShen_ = other.skillConsumeShen_;
      skillSpecialConsume_ = other.skillSpecialConsume_;
      skillSpecialConsumeValue_ = other.skillSpecialConsumeValue_;
      skillSpecialState_ = other.skillSpecialState_;
      skillUseOdds_ = other.skillUseOdds_;
      skillShuiDu_ = other.skillShuiDu_;
      skillHuoDu_ = other.skillHuoDu_;
      skillFengDu_ = other.skillFengDu_;
      skillLeiDu_ = other.skillLeiDu_;
      skillTuDu_ = other.skillTuDu_;
      skillDing_ = other.skillDing_;
      skillFeng_ = other.skillFeng_;
      skillJin_ = other.skillJin_;
      skillMian_ = other.skillMian_;
      skillLuan_ = other.skillLuan_;
      skillKuang_ = other.skillKuang_;
      skillJing_ = other.skillJing_;
      skillBi_ = other.skillBi_;
      skillJie_ = other.skillJie_;
      skillYin_ = other.skillYin_;
      skillPinSi_ = other.skillPinSi_;
      skillSiWang_ = other.skillSiWang_;
      skillBiDu_ = other.skillBiDu_;
      skillWuAdd_ = other.skillWuAdd_;
      skillWuSub_ = other.skillWuSub_;
      skillFangAdd_ = other.skillFangAdd_;
      skillFangSub_ = other.skillFangSub_;
      skillSuAdd_ = other.skillSuAdd_;
      skillSuSub_ = other.skillSuSub_;
      skillYunAdd_ = other.skillYunAdd_;
      skillYunSub_ = other.skillYunSub_;
      skillEffectJing_ = other.skillEffectJing_;
      skillEffectQi_ = other.skillEffectQi_;
      skillEffectShen_ = other.skillEffectShen_;
      skillEffectWu_ = other.skillEffectWu_;
      skillEffectFang_ = other.skillEffectFang_;
      skillEffectSu_ = other.skillEffectSu_;
      skillEffectYun_ = other.skillEffectYun_;
      skillEffectShui_ = other.skillEffectShui_;
      skillEffectHuo_ = other.skillEffectHuo_;
      skillEffectFeng_ = other.skillEffectFeng_;
      skillEffectLei_ = other.skillEffectLei_;
      skillEffectTu_ = other.skillEffectTu_;
      skillLevel1NeedNum_ = other.skillLevel1NeedNum_;
      skillLevel2NeedNum_ = other.skillLevel2NeedNum_;
      skillLevel3NeedNum_ = other.skillLevel3NeedNum_;
      skillLevel4NeedNum_ = other.skillLevel4NeedNum_;
      skillAndID1_ = other.skillAndID1_;
      skillAndID2_ = other.skillAndID2_;
      skillAndID3_ = other.skillAndID3_;
      skillAndLevel1_ = other.skillAndLevel1_;
      skillAndLevel2_ = other.skillAndLevel2_;
      skillAndLevel3_ = other.skillAndLevel3_;
      skillComboLevel1_ = other.skillComboLevel1_;
      skillComboLevel2_ = other.skillComboLevel2_;
      skillComboLevel3_ = other.skillComboLevel3_;
      skillManLv1_ = other.skillManLv1_;
      skillManLv2_ = other.skillManLv2_;
      skillManLv3_ = other.skillManLv3_;
      skillComboID1_ = other.skillComboID1_;
      skillComboID2_ = other.skillComboID2_;
      skillComboID3_ = other.skillComboID3_;
      skillAddLvID_ = other.skillAddLvID_;
      skillAddRoleLv_ = other.skillAddRoleLv_;
      skillNeedLv_ = other.skillNeedLv_;
      skillIsUseAll_ = other.skillIsUseAll_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo Clone() {
      return new SkillInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  技能名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    /// <summary>
    ///  技能描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    /// <summary>
    ///  技能图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privateId" field.</summary>
    public const int PrivateIdFieldNumber = 5;
    private string privateId_ = "";
    /// <summary>
    ///  专属人物id(为零时不专属)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateId {
      get { return privateId_; }
      set {
        privateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///  技能类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "openBy" field.</summary>
    public const int OpenByFieldNumber = 7;
    private int openBy_;
    /// <summary>
    ///  开放依据(人物等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenBy {
      get { return openBy_; }
      set {
        openBy_ = value;
      }
    }

    /// <summary>Field number for the "basePropertyId" field.</summary>
    public const int BasePropertyIdFieldNumber = 8;
    private string basePropertyId_ = "";
    /// <summary>
    ///  基础属性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePropertyId {
      get { return basePropertyId_; }
      set {
        basePropertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AttShui" field.</summary>
    public const int SkillAttShuiFieldNumber = 9;
    private string skillAttShui_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAttShui {
      get { return skillAttShui_; }
      set {
        skillAttShui_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AttHuo" field.</summary>
    public const int SkillAttHuoFieldNumber = 10;
    private string skillAttHuo_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAttHuo {
      get { return skillAttHuo_; }
      set {
        skillAttHuo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AttFeng" field.</summary>
    public const int SkillAttFengFieldNumber = 11;
    private string skillAttFeng_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAttFeng {
      get { return skillAttFeng_; }
      set {
        skillAttFeng_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AttLei" field.</summary>
    public const int SkillAttLeiFieldNumber = 12;
    private string skillAttLei_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAttLei {
      get { return skillAttLei_; }
      set {
        skillAttLei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AttTu" field.</summary>
    public const int SkillAttTuFieldNumber = 13;
    private string skillAttTu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAttTu {
      get { return skillAttTu_; }
      set {
        skillAttTu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Type" field.</summary>
    public const int SkillTypeFieldNumber = 14;
    private int skillType_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "User_JingTian" field.</summary>
    public const int UserJingTianFieldNumber = 15;
    private string userJingTian_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserJingTian {
      get { return userJingTian_; }
      set {
        userJingTian_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User_XueJian" field.</summary>
    public const int UserXueJianFieldNumber = 16;
    private string userXueJian_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserXueJian {
      get { return userXueJian_; }
      set {
        userXueJian_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User_ChangQing" field.</summary>
    public const int UserChangQingFieldNumber = 17;
    private string userChangQing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserChangQing {
      get { return userChangQing_; }
      set {
        userChangQing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User_LongKui" field.</summary>
    public const int UserLongKuiFieldNumber = 18;
    private string userLongKui_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserLongKui {
      get { return userLongKui_; }
      set {
        userLongKui_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User_ZiXuan" field.</summary>
    public const int UserZiXuanFieldNumber = 19;
    private string userZiXuan_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserZiXuan {
      get { return userZiXuan_; }
      set {
        userZiXuan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_UseRange" field.</summary>
    public const int SkillUseRangeFieldNumber = 20;
    private string skillUseRange_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillUseRange {
      get { return skillUseRange_; }
      set {
        skillUseRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Consume_Qi" field.</summary>
    public const int SkillConsumeQiFieldNumber = 21;
    private string skillConsumeQi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillConsumeQi {
      get { return skillConsumeQi_; }
      set {
        skillConsumeQi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Consume_Shen" field.</summary>
    public const int SkillConsumeShenFieldNumber = 22;
    private string skillConsumeShen_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillConsumeShen {
      get { return skillConsumeShen_; }
      set {
        skillConsumeShen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Special_Consume" field.</summary>
    public const int SkillSpecialConsumeFieldNumber = 23;
    private string skillSpecialConsume_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillSpecialConsume {
      get { return skillSpecialConsume_; }
      set {
        skillSpecialConsume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Special_ConsumeValue" field.</summary>
    public const int SkillSpecialConsumeValueFieldNumber = 24;
    private string skillSpecialConsumeValue_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillSpecialConsumeValue {
      get { return skillSpecialConsumeValue_; }
      set {
        skillSpecialConsumeValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Special_State" field.</summary>
    public const int SkillSpecialStateFieldNumber = 25;
    private string skillSpecialState_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillSpecialState {
      get { return skillSpecialState_; }
      set {
        skillSpecialState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Use_Odds" field.</summary>
    public const int SkillUseOddsFieldNumber = 26;
    private string skillUseOdds_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillUseOdds {
      get { return skillUseOdds_; }
      set {
        skillUseOdds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ShuiDu" field.</summary>
    public const int SkillShuiDuFieldNumber = 27;
    private string skillShuiDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillShuiDu {
      get { return skillShuiDu_; }
      set {
        skillShuiDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_HuoDu" field.</summary>
    public const int SkillHuoDuFieldNumber = 28;
    private string skillHuoDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillHuoDu {
      get { return skillHuoDu_; }
      set {
        skillHuoDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_FengDu" field.</summary>
    public const int SkillFengDuFieldNumber = 29;
    private string skillFengDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillFengDu {
      get { return skillFengDu_; }
      set {
        skillFengDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_LeiDu" field.</summary>
    public const int SkillLeiDuFieldNumber = 30;
    private string skillLeiDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillLeiDu {
      get { return skillLeiDu_; }
      set {
        skillLeiDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_TuDu" field.</summary>
    public const int SkillTuDuFieldNumber = 31;
    private string skillTuDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillTuDu {
      get { return skillTuDu_; }
      set {
        skillTuDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Ding" field.</summary>
    public const int SkillDingFieldNumber = 32;
    private string skillDing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillDing {
      get { return skillDing_; }
      set {
        skillDing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Feng" field.</summary>
    public const int SkillFengFieldNumber = 33;
    private string skillFeng_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillFeng {
      get { return skillFeng_; }
      set {
        skillFeng_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Jin" field.</summary>
    public const int SkillJinFieldNumber = 34;
    private string skillJin_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillJin {
      get { return skillJin_; }
      set {
        skillJin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Mian" field.</summary>
    public const int SkillMianFieldNumber = 35;
    private string skillMian_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillMian {
      get { return skillMian_; }
      set {
        skillMian_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Luan" field.</summary>
    public const int SkillLuanFieldNumber = 36;
    private string skillLuan_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillLuan {
      get { return skillLuan_; }
      set {
        skillLuan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Kuang" field.</summary>
    public const int SkillKuangFieldNumber = 37;
    private string skillKuang_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillKuang {
      get { return skillKuang_; }
      set {
        skillKuang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Jing" field.</summary>
    public const int SkillJingFieldNumber = 38;
    private string skillJing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillJing {
      get { return skillJing_; }
      set {
        skillJing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Bi" field.</summary>
    public const int SkillBiFieldNumber = 39;
    private string skillBi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillBi {
      get { return skillBi_; }
      set {
        skillBi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Jie" field.</summary>
    public const int SkillJieFieldNumber = 40;
    private string skillJie_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillJie {
      get { return skillJie_; }
      set {
        skillJie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Yin" field.</summary>
    public const int SkillYinFieldNumber = 41;
    private string skillYin_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillYin {
      get { return skillYin_; }
      set {
        skillYin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_PinSi" field.</summary>
    public const int SkillPinSiFieldNumber = 42;
    private string skillPinSi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillPinSi {
      get { return skillPinSi_; }
      set {
        skillPinSi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_SiWang" field.</summary>
    public const int SkillSiWangFieldNumber = 43;
    private string skillSiWang_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillSiWang {
      get { return skillSiWang_; }
      set {
        skillSiWang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_BiDu" field.</summary>
    public const int SkillBiDuFieldNumber = 44;
    private string skillBiDu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillBiDu {
      get { return skillBiDu_; }
      set {
        skillBiDu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_WuAdd" field.</summary>
    public const int SkillWuAddFieldNumber = 45;
    private string skillWuAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillWuAdd {
      get { return skillWuAdd_; }
      set {
        skillWuAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_WuSub" field.</summary>
    public const int SkillWuSubFieldNumber = 46;
    private string skillWuSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillWuSub {
      get { return skillWuSub_; }
      set {
        skillWuSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_FangAdd" field.</summary>
    public const int SkillFangAddFieldNumber = 47;
    private string skillFangAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillFangAdd {
      get { return skillFangAdd_; }
      set {
        skillFangAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_FangSub" field.</summary>
    public const int SkillFangSubFieldNumber = 48;
    private string skillFangSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillFangSub {
      get { return skillFangSub_; }
      set {
        skillFangSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_SuAdd" field.</summary>
    public const int SkillSuAddFieldNumber = 49;
    private string skillSuAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillSuAdd {
      get { return skillSuAdd_; }
      set {
        skillSuAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_SuSub" field.</summary>
    public const int SkillSuSubFieldNumber = 50;
    private string skillSuSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillSuSub {
      get { return skillSuSub_; }
      set {
        skillSuSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_YunAdd" field.</summary>
    public const int SkillYunAddFieldNumber = 51;
    private string skillYunAdd_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillYunAdd {
      get { return skillYunAdd_; }
      set {
        skillYunAdd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_YunSub" field.</summary>
    public const int SkillYunSubFieldNumber = 52;
    private string skillYunSub_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillYunSub {
      get { return skillYunSub_; }
      set {
        skillYunSub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Jing" field.</summary>
    public const int SkillEffectJingFieldNumber = 53;
    private string skillEffectJing_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectJing {
      get { return skillEffectJing_; }
      set {
        skillEffectJing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Qi" field.</summary>
    public const int SkillEffectQiFieldNumber = 54;
    private string skillEffectQi_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectQi {
      get { return skillEffectQi_; }
      set {
        skillEffectQi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Shen" field.</summary>
    public const int SkillEffectShenFieldNumber = 55;
    private string skillEffectShen_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectShen {
      get { return skillEffectShen_; }
      set {
        skillEffectShen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Wu" field.</summary>
    public const int SkillEffectWuFieldNumber = 56;
    private string skillEffectWu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectWu {
      get { return skillEffectWu_; }
      set {
        skillEffectWu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Fang" field.</summary>
    public const int SkillEffectFangFieldNumber = 57;
    private string skillEffectFang_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectFang {
      get { return skillEffectFang_; }
      set {
        skillEffectFang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Su" field.</summary>
    public const int SkillEffectSuFieldNumber = 58;
    private string skillEffectSu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectSu {
      get { return skillEffectSu_; }
      set {
        skillEffectSu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Yun" field.</summary>
    public const int SkillEffectYunFieldNumber = 59;
    private string skillEffectYun_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectYun {
      get { return skillEffectYun_; }
      set {
        skillEffectYun_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Shui" field.</summary>
    public const int SkillEffectShuiFieldNumber = 60;
    private string skillEffectShui_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectShui {
      get { return skillEffectShui_; }
      set {
        skillEffectShui_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Huo" field.</summary>
    public const int SkillEffectHuoFieldNumber = 61;
    private string skillEffectHuo_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectHuo {
      get { return skillEffectHuo_; }
      set {
        skillEffectHuo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Feng" field.</summary>
    public const int SkillEffectFengFieldNumber = 62;
    private string skillEffectFeng_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectFeng {
      get { return skillEffectFeng_; }
      set {
        skillEffectFeng_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Lei" field.</summary>
    public const int SkillEffectLeiFieldNumber = 63;
    private string skillEffectLei_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectLei {
      get { return skillEffectLei_; }
      set {
        skillEffectLei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Effect_Tu" field.</summary>
    public const int SkillEffectTuFieldNumber = 64;
    private string skillEffectTu_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillEffectTu {
      get { return skillEffectTu_; }
      set {
        skillEffectTu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Level1_NeedNum" field.</summary>
    public const int SkillLevel1NeedNumFieldNumber = 65;
    private string skillLevel1NeedNum_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillLevel1NeedNum {
      get { return skillLevel1NeedNum_; }
      set {
        skillLevel1NeedNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Level2_NeedNum" field.</summary>
    public const int SkillLevel2NeedNumFieldNumber = 66;
    private string skillLevel2NeedNum_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillLevel2NeedNum {
      get { return skillLevel2NeedNum_; }
      set {
        skillLevel2NeedNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Level3_NeedNum" field.</summary>
    public const int SkillLevel3NeedNumFieldNumber = 67;
    private string skillLevel3NeedNum_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillLevel3NeedNum {
      get { return skillLevel3NeedNum_; }
      set {
        skillLevel3NeedNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_Level4_NeedNum" field.</summary>
    public const int SkillLevel4NeedNumFieldNumber = 68;
    private string skillLevel4NeedNum_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillLevel4NeedNum {
      get { return skillLevel4NeedNum_; }
      set {
        skillLevel4NeedNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AndID1" field.</summary>
    public const int SkillAndID1FieldNumber = 69;
    private string skillAndID1_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAndID1 {
      get { return skillAndID1_; }
      set {
        skillAndID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AndID2" field.</summary>
    public const int SkillAndID2FieldNumber = 70;
    private string skillAndID2_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAndID2 {
      get { return skillAndID2_; }
      set {
        skillAndID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AndID3" field.</summary>
    public const int SkillAndID3FieldNumber = 71;
    private string skillAndID3_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAndID3 {
      get { return skillAndID3_; }
      set {
        skillAndID3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AndLevel1" field.</summary>
    public const int SkillAndLevel1FieldNumber = 72;
    private string skillAndLevel1_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAndLevel1 {
      get { return skillAndLevel1_; }
      set {
        skillAndLevel1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AndLevel2" field.</summary>
    public const int SkillAndLevel2FieldNumber = 73;
    private string skillAndLevel2_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAndLevel2 {
      get { return skillAndLevel2_; }
      set {
        skillAndLevel2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AndLevel3" field.</summary>
    public const int SkillAndLevel3FieldNumber = 74;
    private string skillAndLevel3_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAndLevel3 {
      get { return skillAndLevel3_; }
      set {
        skillAndLevel3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ComboLevel1" field.</summary>
    public const int SkillComboLevel1FieldNumber = 75;
    private string skillComboLevel1_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillComboLevel1 {
      get { return skillComboLevel1_; }
      set {
        skillComboLevel1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ComboLevel2" field.</summary>
    public const int SkillComboLevel2FieldNumber = 76;
    private string skillComboLevel2_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillComboLevel2 {
      get { return skillComboLevel2_; }
      set {
        skillComboLevel2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ComboLevel3" field.</summary>
    public const int SkillComboLevel3FieldNumber = 77;
    private string skillComboLevel3_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillComboLevel3 {
      get { return skillComboLevel3_; }
      set {
        skillComboLevel3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ManLv1" field.</summary>
    public const int SkillManLv1FieldNumber = 78;
    private string skillManLv1_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillManLv1 {
      get { return skillManLv1_; }
      set {
        skillManLv1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ManLv2" field.</summary>
    public const int SkillManLv2FieldNumber = 79;
    private string skillManLv2_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillManLv2 {
      get { return skillManLv2_; }
      set {
        skillManLv2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ManLv3" field.</summary>
    public const int SkillManLv3FieldNumber = 80;
    private string skillManLv3_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillManLv3 {
      get { return skillManLv3_; }
      set {
        skillManLv3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ComboID1" field.</summary>
    public const int SkillComboID1FieldNumber = 81;
    private string skillComboID1_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillComboID1 {
      get { return skillComboID1_; }
      set {
        skillComboID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ComboID2" field.</summary>
    public const int SkillComboID2FieldNumber = 82;
    private string skillComboID2_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillComboID2 {
      get { return skillComboID2_; }
      set {
        skillComboID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_ComboID3" field.</summary>
    public const int SkillComboID3FieldNumber = 83;
    private string skillComboID3_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillComboID3 {
      get { return skillComboID3_; }
      set {
        skillComboID3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AddLvID" field.</summary>
    public const int SkillAddLvIDFieldNumber = 84;
    private string skillAddLvID_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAddLvID {
      get { return skillAddLvID_; }
      set {
        skillAddLvID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_AddRoleLv" field.</summary>
    public const int SkillAddRoleLvFieldNumber = 85;
    private string skillAddRoleLv_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAddRoleLv {
      get { return skillAddRoleLv_; }
      set {
        skillAddRoleLv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_NeedLv" field.</summary>
    public const int SkillNeedLvFieldNumber = 86;
    private string skillNeedLv_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillNeedLv {
      get { return skillNeedLv_; }
      set {
        skillNeedLv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skill_IsUseAll" field.</summary>
    public const int SkillIsUseAllFieldNumber = 87;
    private string skillIsUseAll_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillIsUseAll {
      get { return skillIsUseAll_; }
      set {
        skillIsUseAll_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Remark != other.Remark) return false;
      if (Icon != other.Icon) return false;
      if (PrivateId != other.PrivateId) return false;
      if (Type != other.Type) return false;
      if (OpenBy != other.OpenBy) return false;
      if (BasePropertyId != other.BasePropertyId) return false;
      if (SkillAttShui != other.SkillAttShui) return false;
      if (SkillAttHuo != other.SkillAttHuo) return false;
      if (SkillAttFeng != other.SkillAttFeng) return false;
      if (SkillAttLei != other.SkillAttLei) return false;
      if (SkillAttTu != other.SkillAttTu) return false;
      if (SkillType != other.SkillType) return false;
      if (UserJingTian != other.UserJingTian) return false;
      if (UserXueJian != other.UserXueJian) return false;
      if (UserChangQing != other.UserChangQing) return false;
      if (UserLongKui != other.UserLongKui) return false;
      if (UserZiXuan != other.UserZiXuan) return false;
      if (SkillUseRange != other.SkillUseRange) return false;
      if (SkillConsumeQi != other.SkillConsumeQi) return false;
      if (SkillConsumeShen != other.SkillConsumeShen) return false;
      if (SkillSpecialConsume != other.SkillSpecialConsume) return false;
      if (SkillSpecialConsumeValue != other.SkillSpecialConsumeValue) return false;
      if (SkillSpecialState != other.SkillSpecialState) return false;
      if (SkillUseOdds != other.SkillUseOdds) return false;
      if (SkillShuiDu != other.SkillShuiDu) return false;
      if (SkillHuoDu != other.SkillHuoDu) return false;
      if (SkillFengDu != other.SkillFengDu) return false;
      if (SkillLeiDu != other.SkillLeiDu) return false;
      if (SkillTuDu != other.SkillTuDu) return false;
      if (SkillDing != other.SkillDing) return false;
      if (SkillFeng != other.SkillFeng) return false;
      if (SkillJin != other.SkillJin) return false;
      if (SkillMian != other.SkillMian) return false;
      if (SkillLuan != other.SkillLuan) return false;
      if (SkillKuang != other.SkillKuang) return false;
      if (SkillJing != other.SkillJing) return false;
      if (SkillBi != other.SkillBi) return false;
      if (SkillJie != other.SkillJie) return false;
      if (SkillYin != other.SkillYin) return false;
      if (SkillPinSi != other.SkillPinSi) return false;
      if (SkillSiWang != other.SkillSiWang) return false;
      if (SkillBiDu != other.SkillBiDu) return false;
      if (SkillWuAdd != other.SkillWuAdd) return false;
      if (SkillWuSub != other.SkillWuSub) return false;
      if (SkillFangAdd != other.SkillFangAdd) return false;
      if (SkillFangSub != other.SkillFangSub) return false;
      if (SkillSuAdd != other.SkillSuAdd) return false;
      if (SkillSuSub != other.SkillSuSub) return false;
      if (SkillYunAdd != other.SkillYunAdd) return false;
      if (SkillYunSub != other.SkillYunSub) return false;
      if (SkillEffectJing != other.SkillEffectJing) return false;
      if (SkillEffectQi != other.SkillEffectQi) return false;
      if (SkillEffectShen != other.SkillEffectShen) return false;
      if (SkillEffectWu != other.SkillEffectWu) return false;
      if (SkillEffectFang != other.SkillEffectFang) return false;
      if (SkillEffectSu != other.SkillEffectSu) return false;
      if (SkillEffectYun != other.SkillEffectYun) return false;
      if (SkillEffectShui != other.SkillEffectShui) return false;
      if (SkillEffectHuo != other.SkillEffectHuo) return false;
      if (SkillEffectFeng != other.SkillEffectFeng) return false;
      if (SkillEffectLei != other.SkillEffectLei) return false;
      if (SkillEffectTu != other.SkillEffectTu) return false;
      if (SkillLevel1NeedNum != other.SkillLevel1NeedNum) return false;
      if (SkillLevel2NeedNum != other.SkillLevel2NeedNum) return false;
      if (SkillLevel3NeedNum != other.SkillLevel3NeedNum) return false;
      if (SkillLevel4NeedNum != other.SkillLevel4NeedNum) return false;
      if (SkillAndID1 != other.SkillAndID1) return false;
      if (SkillAndID2 != other.SkillAndID2) return false;
      if (SkillAndID3 != other.SkillAndID3) return false;
      if (SkillAndLevel1 != other.SkillAndLevel1) return false;
      if (SkillAndLevel2 != other.SkillAndLevel2) return false;
      if (SkillAndLevel3 != other.SkillAndLevel3) return false;
      if (SkillComboLevel1 != other.SkillComboLevel1) return false;
      if (SkillComboLevel2 != other.SkillComboLevel2) return false;
      if (SkillComboLevel3 != other.SkillComboLevel3) return false;
      if (SkillManLv1 != other.SkillManLv1) return false;
      if (SkillManLv2 != other.SkillManLv2) return false;
      if (SkillManLv3 != other.SkillManLv3) return false;
      if (SkillComboID1 != other.SkillComboID1) return false;
      if (SkillComboID2 != other.SkillComboID2) return false;
      if (SkillComboID3 != other.SkillComboID3) return false;
      if (SkillAddLvID != other.SkillAddLvID) return false;
      if (SkillAddRoleLv != other.SkillAddRoleLv) return false;
      if (SkillNeedLv != other.SkillNeedLv) return false;
      if (SkillIsUseAll != other.SkillIsUseAll) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (PrivateId.Length != 0) hash ^= PrivateId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (OpenBy != 0) hash ^= OpenBy.GetHashCode();
      if (BasePropertyId.Length != 0) hash ^= BasePropertyId.GetHashCode();
      if (SkillAttShui.Length != 0) hash ^= SkillAttShui.GetHashCode();
      if (SkillAttHuo.Length != 0) hash ^= SkillAttHuo.GetHashCode();
      if (SkillAttFeng.Length != 0) hash ^= SkillAttFeng.GetHashCode();
      if (SkillAttLei.Length != 0) hash ^= SkillAttLei.GetHashCode();
      if (SkillAttTu.Length != 0) hash ^= SkillAttTu.GetHashCode();
      if (SkillType != 0) hash ^= SkillType.GetHashCode();
      if (UserJingTian.Length != 0) hash ^= UserJingTian.GetHashCode();
      if (UserXueJian.Length != 0) hash ^= UserXueJian.GetHashCode();
      if (UserChangQing.Length != 0) hash ^= UserChangQing.GetHashCode();
      if (UserLongKui.Length != 0) hash ^= UserLongKui.GetHashCode();
      if (UserZiXuan.Length != 0) hash ^= UserZiXuan.GetHashCode();
      if (SkillUseRange.Length != 0) hash ^= SkillUseRange.GetHashCode();
      if (SkillConsumeQi.Length != 0) hash ^= SkillConsumeQi.GetHashCode();
      if (SkillConsumeShen.Length != 0) hash ^= SkillConsumeShen.GetHashCode();
      if (SkillSpecialConsume.Length != 0) hash ^= SkillSpecialConsume.GetHashCode();
      if (SkillSpecialConsumeValue.Length != 0) hash ^= SkillSpecialConsumeValue.GetHashCode();
      if (SkillSpecialState.Length != 0) hash ^= SkillSpecialState.GetHashCode();
      if (SkillUseOdds.Length != 0) hash ^= SkillUseOdds.GetHashCode();
      if (SkillShuiDu.Length != 0) hash ^= SkillShuiDu.GetHashCode();
      if (SkillHuoDu.Length != 0) hash ^= SkillHuoDu.GetHashCode();
      if (SkillFengDu.Length != 0) hash ^= SkillFengDu.GetHashCode();
      if (SkillLeiDu.Length != 0) hash ^= SkillLeiDu.GetHashCode();
      if (SkillTuDu.Length != 0) hash ^= SkillTuDu.GetHashCode();
      if (SkillDing.Length != 0) hash ^= SkillDing.GetHashCode();
      if (SkillFeng.Length != 0) hash ^= SkillFeng.GetHashCode();
      if (SkillJin.Length != 0) hash ^= SkillJin.GetHashCode();
      if (SkillMian.Length != 0) hash ^= SkillMian.GetHashCode();
      if (SkillLuan.Length != 0) hash ^= SkillLuan.GetHashCode();
      if (SkillKuang.Length != 0) hash ^= SkillKuang.GetHashCode();
      if (SkillJing.Length != 0) hash ^= SkillJing.GetHashCode();
      if (SkillBi.Length != 0) hash ^= SkillBi.GetHashCode();
      if (SkillJie.Length != 0) hash ^= SkillJie.GetHashCode();
      if (SkillYin.Length != 0) hash ^= SkillYin.GetHashCode();
      if (SkillPinSi.Length != 0) hash ^= SkillPinSi.GetHashCode();
      if (SkillSiWang.Length != 0) hash ^= SkillSiWang.GetHashCode();
      if (SkillBiDu.Length != 0) hash ^= SkillBiDu.GetHashCode();
      if (SkillWuAdd.Length != 0) hash ^= SkillWuAdd.GetHashCode();
      if (SkillWuSub.Length != 0) hash ^= SkillWuSub.GetHashCode();
      if (SkillFangAdd.Length != 0) hash ^= SkillFangAdd.GetHashCode();
      if (SkillFangSub.Length != 0) hash ^= SkillFangSub.GetHashCode();
      if (SkillSuAdd.Length != 0) hash ^= SkillSuAdd.GetHashCode();
      if (SkillSuSub.Length != 0) hash ^= SkillSuSub.GetHashCode();
      if (SkillYunAdd.Length != 0) hash ^= SkillYunAdd.GetHashCode();
      if (SkillYunSub.Length != 0) hash ^= SkillYunSub.GetHashCode();
      if (SkillEffectJing.Length != 0) hash ^= SkillEffectJing.GetHashCode();
      if (SkillEffectQi.Length != 0) hash ^= SkillEffectQi.GetHashCode();
      if (SkillEffectShen.Length != 0) hash ^= SkillEffectShen.GetHashCode();
      if (SkillEffectWu.Length != 0) hash ^= SkillEffectWu.GetHashCode();
      if (SkillEffectFang.Length != 0) hash ^= SkillEffectFang.GetHashCode();
      if (SkillEffectSu.Length != 0) hash ^= SkillEffectSu.GetHashCode();
      if (SkillEffectYun.Length != 0) hash ^= SkillEffectYun.GetHashCode();
      if (SkillEffectShui.Length != 0) hash ^= SkillEffectShui.GetHashCode();
      if (SkillEffectHuo.Length != 0) hash ^= SkillEffectHuo.GetHashCode();
      if (SkillEffectFeng.Length != 0) hash ^= SkillEffectFeng.GetHashCode();
      if (SkillEffectLei.Length != 0) hash ^= SkillEffectLei.GetHashCode();
      if (SkillEffectTu.Length != 0) hash ^= SkillEffectTu.GetHashCode();
      if (SkillLevel1NeedNum.Length != 0) hash ^= SkillLevel1NeedNum.GetHashCode();
      if (SkillLevel2NeedNum.Length != 0) hash ^= SkillLevel2NeedNum.GetHashCode();
      if (SkillLevel3NeedNum.Length != 0) hash ^= SkillLevel3NeedNum.GetHashCode();
      if (SkillLevel4NeedNum.Length != 0) hash ^= SkillLevel4NeedNum.GetHashCode();
      if (SkillAndID1.Length != 0) hash ^= SkillAndID1.GetHashCode();
      if (SkillAndID2.Length != 0) hash ^= SkillAndID2.GetHashCode();
      if (SkillAndID3.Length != 0) hash ^= SkillAndID3.GetHashCode();
      if (SkillAndLevel1.Length != 0) hash ^= SkillAndLevel1.GetHashCode();
      if (SkillAndLevel2.Length != 0) hash ^= SkillAndLevel2.GetHashCode();
      if (SkillAndLevel3.Length != 0) hash ^= SkillAndLevel3.GetHashCode();
      if (SkillComboLevel1.Length != 0) hash ^= SkillComboLevel1.GetHashCode();
      if (SkillComboLevel2.Length != 0) hash ^= SkillComboLevel2.GetHashCode();
      if (SkillComboLevel3.Length != 0) hash ^= SkillComboLevel3.GetHashCode();
      if (SkillManLv1.Length != 0) hash ^= SkillManLv1.GetHashCode();
      if (SkillManLv2.Length != 0) hash ^= SkillManLv2.GetHashCode();
      if (SkillManLv3.Length != 0) hash ^= SkillManLv3.GetHashCode();
      if (SkillComboID1.Length != 0) hash ^= SkillComboID1.GetHashCode();
      if (SkillComboID2.Length != 0) hash ^= SkillComboID2.GetHashCode();
      if (SkillComboID3.Length != 0) hash ^= SkillComboID3.GetHashCode();
      if (SkillAddLvID.Length != 0) hash ^= SkillAddLvID.GetHashCode();
      if (SkillAddRoleLv.Length != 0) hash ^= SkillAddRoleLv.GetHashCode();
      if (SkillNeedLv.Length != 0) hash ^= SkillNeedLv.GetHashCode();
      if (SkillIsUseAll.Length != 0) hash ^= SkillIsUseAll.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (PrivateId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrivateId);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (OpenBy != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OpenBy);
      }
      if (BasePropertyId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BasePropertyId);
      }
      if (SkillAttShui.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SkillAttShui);
      }
      if (SkillAttHuo.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SkillAttHuo);
      }
      if (SkillAttFeng.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SkillAttFeng);
      }
      if (SkillAttLei.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SkillAttLei);
      }
      if (SkillAttTu.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SkillAttTu);
      }
      if (SkillType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SkillType);
      }
      if (UserJingTian.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(UserJingTian);
      }
      if (UserXueJian.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(UserXueJian);
      }
      if (UserChangQing.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(UserChangQing);
      }
      if (UserLongKui.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(UserLongKui);
      }
      if (UserZiXuan.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UserZiXuan);
      }
      if (SkillUseRange.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(SkillUseRange);
      }
      if (SkillConsumeQi.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(SkillConsumeQi);
      }
      if (SkillConsumeShen.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(SkillConsumeShen);
      }
      if (SkillSpecialConsume.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SkillSpecialConsume);
      }
      if (SkillSpecialConsumeValue.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(SkillSpecialConsumeValue);
      }
      if (SkillSpecialState.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(SkillSpecialState);
      }
      if (SkillUseOdds.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(SkillUseOdds);
      }
      if (SkillShuiDu.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SkillShuiDu);
      }
      if (SkillHuoDu.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(SkillHuoDu);
      }
      if (SkillFengDu.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(SkillFengDu);
      }
      if (SkillLeiDu.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SkillLeiDu);
      }
      if (SkillTuDu.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(SkillTuDu);
      }
      if (SkillDing.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SkillDing);
      }
      if (SkillFeng.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(SkillFeng);
      }
      if (SkillJin.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(SkillJin);
      }
      if (SkillMian.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(SkillMian);
      }
      if (SkillLuan.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(SkillLuan);
      }
      if (SkillKuang.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SkillKuang);
      }
      if (SkillJing.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(SkillJing);
      }
      if (SkillBi.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(SkillBi);
      }
      if (SkillJie.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(SkillJie);
      }
      if (SkillYin.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(SkillYin);
      }
      if (SkillPinSi.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(SkillPinSi);
      }
      if (SkillSiWang.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(SkillSiWang);
      }
      if (SkillBiDu.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(SkillBiDu);
      }
      if (SkillWuAdd.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(SkillWuAdd);
      }
      if (SkillWuSub.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(SkillWuSub);
      }
      if (SkillFangAdd.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(SkillFangAdd);
      }
      if (SkillFangSub.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(SkillFangSub);
      }
      if (SkillSuAdd.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(SkillSuAdd);
      }
      if (SkillSuSub.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(SkillSuSub);
      }
      if (SkillYunAdd.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SkillYunAdd);
      }
      if (SkillYunSub.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(SkillYunSub);
      }
      if (SkillEffectJing.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(SkillEffectJing);
      }
      if (SkillEffectQi.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(SkillEffectQi);
      }
      if (SkillEffectShen.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(SkillEffectShen);
      }
      if (SkillEffectWu.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(SkillEffectWu);
      }
      if (SkillEffectFang.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(SkillEffectFang);
      }
      if (SkillEffectSu.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(SkillEffectSu);
      }
      if (SkillEffectYun.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(SkillEffectYun);
      }
      if (SkillEffectShui.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(SkillEffectShui);
      }
      if (SkillEffectHuo.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(SkillEffectHuo);
      }
      if (SkillEffectFeng.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(SkillEffectFeng);
      }
      if (SkillEffectLei.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(SkillEffectLei);
      }
      if (SkillEffectTu.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(SkillEffectTu);
      }
      if (SkillLevel1NeedNum.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteString(SkillLevel1NeedNum);
      }
      if (SkillLevel2NeedNum.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(SkillLevel2NeedNum);
      }
      if (SkillLevel3NeedNum.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(SkillLevel3NeedNum);
      }
      if (SkillLevel4NeedNum.Length != 0) {
        output.WriteRawTag(162, 4);
        output.WriteString(SkillLevel4NeedNum);
      }
      if (SkillAndID1.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(SkillAndID1);
      }
      if (SkillAndID2.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(SkillAndID2);
      }
      if (SkillAndID3.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(SkillAndID3);
      }
      if (SkillAndLevel1.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(SkillAndLevel1);
      }
      if (SkillAndLevel2.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(SkillAndLevel2);
      }
      if (SkillAndLevel3.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(SkillAndLevel3);
      }
      if (SkillComboLevel1.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(SkillComboLevel1);
      }
      if (SkillComboLevel2.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(SkillComboLevel2);
      }
      if (SkillComboLevel3.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(SkillComboLevel3);
      }
      if (SkillManLv1.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(SkillManLv1);
      }
      if (SkillManLv2.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(SkillManLv2);
      }
      if (SkillManLv3.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(SkillManLv3);
      }
      if (SkillComboID1.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteString(SkillComboID1);
      }
      if (SkillComboID2.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(SkillComboID2);
      }
      if (SkillComboID3.Length != 0) {
        output.WriteRawTag(154, 5);
        output.WriteString(SkillComboID3);
      }
      if (SkillAddLvID.Length != 0) {
        output.WriteRawTag(162, 5);
        output.WriteString(SkillAddLvID);
      }
      if (SkillAddRoleLv.Length != 0) {
        output.WriteRawTag(170, 5);
        output.WriteString(SkillAddRoleLv);
      }
      if (SkillNeedLv.Length != 0) {
        output.WriteRawTag(178, 5);
        output.WriteString(SkillNeedLv);
      }
      if (SkillIsUseAll.Length != 0) {
        output.WriteRawTag(186, 5);
        output.WriteString(SkillIsUseAll);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (PrivateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (OpenBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenBy);
      }
      if (BasePropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePropertyId);
      }
      if (SkillAttShui.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillAttShui);
      }
      if (SkillAttHuo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillAttHuo);
      }
      if (SkillAttFeng.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillAttFeng);
      }
      if (SkillAttLei.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillAttLei);
      }
      if (SkillAttTu.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillAttTu);
      }
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillType);
      }
      if (UserJingTian.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserJingTian);
      }
      if (UserXueJian.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserXueJian);
      }
      if (UserChangQing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserChangQing);
      }
      if (UserLongKui.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserLongKui);
      }
      if (UserZiXuan.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserZiXuan);
      }
      if (SkillUseRange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillUseRange);
      }
      if (SkillConsumeQi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillConsumeQi);
      }
      if (SkillConsumeShen.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillConsumeShen);
      }
      if (SkillSpecialConsume.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillSpecialConsume);
      }
      if (SkillSpecialConsumeValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillSpecialConsumeValue);
      }
      if (SkillSpecialState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillSpecialState);
      }
      if (SkillUseOdds.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillUseOdds);
      }
      if (SkillShuiDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillShuiDu);
      }
      if (SkillHuoDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillHuoDu);
      }
      if (SkillFengDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillFengDu);
      }
      if (SkillLeiDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillLeiDu);
      }
      if (SkillTuDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillTuDu);
      }
      if (SkillDing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillDing);
      }
      if (SkillFeng.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillFeng);
      }
      if (SkillJin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillJin);
      }
      if (SkillMian.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillMian);
      }
      if (SkillLuan.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillLuan);
      }
      if (SkillKuang.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillKuang);
      }
      if (SkillJing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillJing);
      }
      if (SkillBi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillBi);
      }
      if (SkillJie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillJie);
      }
      if (SkillYin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillYin);
      }
      if (SkillPinSi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillPinSi);
      }
      if (SkillSiWang.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillSiWang);
      }
      if (SkillBiDu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillBiDu);
      }
      if (SkillWuAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillWuAdd);
      }
      if (SkillWuSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillWuSub);
      }
      if (SkillFangAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillFangAdd);
      }
      if (SkillFangSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillFangSub);
      }
      if (SkillSuAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillSuAdd);
      }
      if (SkillSuSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillSuSub);
      }
      if (SkillYunAdd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillYunAdd);
      }
      if (SkillYunSub.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillYunSub);
      }
      if (SkillEffectJing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectJing);
      }
      if (SkillEffectQi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectQi);
      }
      if (SkillEffectShen.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectShen);
      }
      if (SkillEffectWu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectWu);
      }
      if (SkillEffectFang.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectFang);
      }
      if (SkillEffectSu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectSu);
      }
      if (SkillEffectYun.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectYun);
      }
      if (SkillEffectShui.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectShui);
      }
      if (SkillEffectHuo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectHuo);
      }
      if (SkillEffectFeng.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectFeng);
      }
      if (SkillEffectLei.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectLei);
      }
      if (SkillEffectTu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillEffectTu);
      }
      if (SkillLevel1NeedNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillLevel1NeedNum);
      }
      if (SkillLevel2NeedNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillLevel2NeedNum);
      }
      if (SkillLevel3NeedNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillLevel3NeedNum);
      }
      if (SkillLevel4NeedNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillLevel4NeedNum);
      }
      if (SkillAndID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAndID1);
      }
      if (SkillAndID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAndID2);
      }
      if (SkillAndID3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAndID3);
      }
      if (SkillAndLevel1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAndLevel1);
      }
      if (SkillAndLevel2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAndLevel2);
      }
      if (SkillAndLevel3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAndLevel3);
      }
      if (SkillComboLevel1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillComboLevel1);
      }
      if (SkillComboLevel2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillComboLevel2);
      }
      if (SkillComboLevel3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillComboLevel3);
      }
      if (SkillManLv1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillManLv1);
      }
      if (SkillManLv2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillManLv2);
      }
      if (SkillManLv3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillManLv3);
      }
      if (SkillComboID1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillComboID1);
      }
      if (SkillComboID2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillComboID2);
      }
      if (SkillComboID3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillComboID3);
      }
      if (SkillAddLvID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAddLvID);
      }
      if (SkillAddRoleLv.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAddRoleLv);
      }
      if (SkillNeedLv.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillNeedLv);
      }
      if (SkillIsUseAll.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillIsUseAll);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.PrivateId.Length != 0) {
        PrivateId = other.PrivateId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.OpenBy != 0) {
        OpenBy = other.OpenBy;
      }
      if (other.BasePropertyId.Length != 0) {
        BasePropertyId = other.BasePropertyId;
      }
      if (other.SkillAttShui.Length != 0) {
        SkillAttShui = other.SkillAttShui;
      }
      if (other.SkillAttHuo.Length != 0) {
        SkillAttHuo = other.SkillAttHuo;
      }
      if (other.SkillAttFeng.Length != 0) {
        SkillAttFeng = other.SkillAttFeng;
      }
      if (other.SkillAttLei.Length != 0) {
        SkillAttLei = other.SkillAttLei;
      }
      if (other.SkillAttTu.Length != 0) {
        SkillAttTu = other.SkillAttTu;
      }
      if (other.SkillType != 0) {
        SkillType = other.SkillType;
      }
      if (other.UserJingTian.Length != 0) {
        UserJingTian = other.UserJingTian;
      }
      if (other.UserXueJian.Length != 0) {
        UserXueJian = other.UserXueJian;
      }
      if (other.UserChangQing.Length != 0) {
        UserChangQing = other.UserChangQing;
      }
      if (other.UserLongKui.Length != 0) {
        UserLongKui = other.UserLongKui;
      }
      if (other.UserZiXuan.Length != 0) {
        UserZiXuan = other.UserZiXuan;
      }
      if (other.SkillUseRange.Length != 0) {
        SkillUseRange = other.SkillUseRange;
      }
      if (other.SkillConsumeQi.Length != 0) {
        SkillConsumeQi = other.SkillConsumeQi;
      }
      if (other.SkillConsumeShen.Length != 0) {
        SkillConsumeShen = other.SkillConsumeShen;
      }
      if (other.SkillSpecialConsume.Length != 0) {
        SkillSpecialConsume = other.SkillSpecialConsume;
      }
      if (other.SkillSpecialConsumeValue.Length != 0) {
        SkillSpecialConsumeValue = other.SkillSpecialConsumeValue;
      }
      if (other.SkillSpecialState.Length != 0) {
        SkillSpecialState = other.SkillSpecialState;
      }
      if (other.SkillUseOdds.Length != 0) {
        SkillUseOdds = other.SkillUseOdds;
      }
      if (other.SkillShuiDu.Length != 0) {
        SkillShuiDu = other.SkillShuiDu;
      }
      if (other.SkillHuoDu.Length != 0) {
        SkillHuoDu = other.SkillHuoDu;
      }
      if (other.SkillFengDu.Length != 0) {
        SkillFengDu = other.SkillFengDu;
      }
      if (other.SkillLeiDu.Length != 0) {
        SkillLeiDu = other.SkillLeiDu;
      }
      if (other.SkillTuDu.Length != 0) {
        SkillTuDu = other.SkillTuDu;
      }
      if (other.SkillDing.Length != 0) {
        SkillDing = other.SkillDing;
      }
      if (other.SkillFeng.Length != 0) {
        SkillFeng = other.SkillFeng;
      }
      if (other.SkillJin.Length != 0) {
        SkillJin = other.SkillJin;
      }
      if (other.SkillMian.Length != 0) {
        SkillMian = other.SkillMian;
      }
      if (other.SkillLuan.Length != 0) {
        SkillLuan = other.SkillLuan;
      }
      if (other.SkillKuang.Length != 0) {
        SkillKuang = other.SkillKuang;
      }
      if (other.SkillJing.Length != 0) {
        SkillJing = other.SkillJing;
      }
      if (other.SkillBi.Length != 0) {
        SkillBi = other.SkillBi;
      }
      if (other.SkillJie.Length != 0) {
        SkillJie = other.SkillJie;
      }
      if (other.SkillYin.Length != 0) {
        SkillYin = other.SkillYin;
      }
      if (other.SkillPinSi.Length != 0) {
        SkillPinSi = other.SkillPinSi;
      }
      if (other.SkillSiWang.Length != 0) {
        SkillSiWang = other.SkillSiWang;
      }
      if (other.SkillBiDu.Length != 0) {
        SkillBiDu = other.SkillBiDu;
      }
      if (other.SkillWuAdd.Length != 0) {
        SkillWuAdd = other.SkillWuAdd;
      }
      if (other.SkillWuSub.Length != 0) {
        SkillWuSub = other.SkillWuSub;
      }
      if (other.SkillFangAdd.Length != 0) {
        SkillFangAdd = other.SkillFangAdd;
      }
      if (other.SkillFangSub.Length != 0) {
        SkillFangSub = other.SkillFangSub;
      }
      if (other.SkillSuAdd.Length != 0) {
        SkillSuAdd = other.SkillSuAdd;
      }
      if (other.SkillSuSub.Length != 0) {
        SkillSuSub = other.SkillSuSub;
      }
      if (other.SkillYunAdd.Length != 0) {
        SkillYunAdd = other.SkillYunAdd;
      }
      if (other.SkillYunSub.Length != 0) {
        SkillYunSub = other.SkillYunSub;
      }
      if (other.SkillEffectJing.Length != 0) {
        SkillEffectJing = other.SkillEffectJing;
      }
      if (other.SkillEffectQi.Length != 0) {
        SkillEffectQi = other.SkillEffectQi;
      }
      if (other.SkillEffectShen.Length != 0) {
        SkillEffectShen = other.SkillEffectShen;
      }
      if (other.SkillEffectWu.Length != 0) {
        SkillEffectWu = other.SkillEffectWu;
      }
      if (other.SkillEffectFang.Length != 0) {
        SkillEffectFang = other.SkillEffectFang;
      }
      if (other.SkillEffectSu.Length != 0) {
        SkillEffectSu = other.SkillEffectSu;
      }
      if (other.SkillEffectYun.Length != 0) {
        SkillEffectYun = other.SkillEffectYun;
      }
      if (other.SkillEffectShui.Length != 0) {
        SkillEffectShui = other.SkillEffectShui;
      }
      if (other.SkillEffectHuo.Length != 0) {
        SkillEffectHuo = other.SkillEffectHuo;
      }
      if (other.SkillEffectFeng.Length != 0) {
        SkillEffectFeng = other.SkillEffectFeng;
      }
      if (other.SkillEffectLei.Length != 0) {
        SkillEffectLei = other.SkillEffectLei;
      }
      if (other.SkillEffectTu.Length != 0) {
        SkillEffectTu = other.SkillEffectTu;
      }
      if (other.SkillLevel1NeedNum.Length != 0) {
        SkillLevel1NeedNum = other.SkillLevel1NeedNum;
      }
      if (other.SkillLevel2NeedNum.Length != 0) {
        SkillLevel2NeedNum = other.SkillLevel2NeedNum;
      }
      if (other.SkillLevel3NeedNum.Length != 0) {
        SkillLevel3NeedNum = other.SkillLevel3NeedNum;
      }
      if (other.SkillLevel4NeedNum.Length != 0) {
        SkillLevel4NeedNum = other.SkillLevel4NeedNum;
      }
      if (other.SkillAndID1.Length != 0) {
        SkillAndID1 = other.SkillAndID1;
      }
      if (other.SkillAndID2.Length != 0) {
        SkillAndID2 = other.SkillAndID2;
      }
      if (other.SkillAndID3.Length != 0) {
        SkillAndID3 = other.SkillAndID3;
      }
      if (other.SkillAndLevel1.Length != 0) {
        SkillAndLevel1 = other.SkillAndLevel1;
      }
      if (other.SkillAndLevel2.Length != 0) {
        SkillAndLevel2 = other.SkillAndLevel2;
      }
      if (other.SkillAndLevel3.Length != 0) {
        SkillAndLevel3 = other.SkillAndLevel3;
      }
      if (other.SkillComboLevel1.Length != 0) {
        SkillComboLevel1 = other.SkillComboLevel1;
      }
      if (other.SkillComboLevel2.Length != 0) {
        SkillComboLevel2 = other.SkillComboLevel2;
      }
      if (other.SkillComboLevel3.Length != 0) {
        SkillComboLevel3 = other.SkillComboLevel3;
      }
      if (other.SkillManLv1.Length != 0) {
        SkillManLv1 = other.SkillManLv1;
      }
      if (other.SkillManLv2.Length != 0) {
        SkillManLv2 = other.SkillManLv2;
      }
      if (other.SkillManLv3.Length != 0) {
        SkillManLv3 = other.SkillManLv3;
      }
      if (other.SkillComboID1.Length != 0) {
        SkillComboID1 = other.SkillComboID1;
      }
      if (other.SkillComboID2.Length != 0) {
        SkillComboID2 = other.SkillComboID2;
      }
      if (other.SkillComboID3.Length != 0) {
        SkillComboID3 = other.SkillComboID3;
      }
      if (other.SkillAddLvID.Length != 0) {
        SkillAddLvID = other.SkillAddLvID;
      }
      if (other.SkillAddRoleLv.Length != 0) {
        SkillAddRoleLv = other.SkillAddRoleLv;
      }
      if (other.SkillNeedLv.Length != 0) {
        SkillNeedLv = other.SkillNeedLv;
      }
      if (other.SkillIsUseAll.Length != 0) {
        SkillIsUseAll = other.SkillIsUseAll;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
          case 42: {
            PrivateId = input.ReadString();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            OpenBy = input.ReadInt32();
            break;
          }
          case 66: {
            BasePropertyId = input.ReadString();
            break;
          }
          case 74: {
            SkillAttShui = input.ReadString();
            break;
          }
          case 82: {
            SkillAttHuo = input.ReadString();
            break;
          }
          case 90: {
            SkillAttFeng = input.ReadString();
            break;
          }
          case 98: {
            SkillAttLei = input.ReadString();
            break;
          }
          case 106: {
            SkillAttTu = input.ReadString();
            break;
          }
          case 112: {
            SkillType = input.ReadInt32();
            break;
          }
          case 122: {
            UserJingTian = input.ReadString();
            break;
          }
          case 130: {
            UserXueJian = input.ReadString();
            break;
          }
          case 138: {
            UserChangQing = input.ReadString();
            break;
          }
          case 146: {
            UserLongKui = input.ReadString();
            break;
          }
          case 154: {
            UserZiXuan = input.ReadString();
            break;
          }
          case 162: {
            SkillUseRange = input.ReadString();
            break;
          }
          case 170: {
            SkillConsumeQi = input.ReadString();
            break;
          }
          case 178: {
            SkillConsumeShen = input.ReadString();
            break;
          }
          case 186: {
            SkillSpecialConsume = input.ReadString();
            break;
          }
          case 194: {
            SkillSpecialConsumeValue = input.ReadString();
            break;
          }
          case 202: {
            SkillSpecialState = input.ReadString();
            break;
          }
          case 210: {
            SkillUseOdds = input.ReadString();
            break;
          }
          case 218: {
            SkillShuiDu = input.ReadString();
            break;
          }
          case 226: {
            SkillHuoDu = input.ReadString();
            break;
          }
          case 234: {
            SkillFengDu = input.ReadString();
            break;
          }
          case 242: {
            SkillLeiDu = input.ReadString();
            break;
          }
          case 250: {
            SkillTuDu = input.ReadString();
            break;
          }
          case 258: {
            SkillDing = input.ReadString();
            break;
          }
          case 266: {
            SkillFeng = input.ReadString();
            break;
          }
          case 274: {
            SkillJin = input.ReadString();
            break;
          }
          case 282: {
            SkillMian = input.ReadString();
            break;
          }
          case 290: {
            SkillLuan = input.ReadString();
            break;
          }
          case 298: {
            SkillKuang = input.ReadString();
            break;
          }
          case 306: {
            SkillJing = input.ReadString();
            break;
          }
          case 314: {
            SkillBi = input.ReadString();
            break;
          }
          case 322: {
            SkillJie = input.ReadString();
            break;
          }
          case 330: {
            SkillYin = input.ReadString();
            break;
          }
          case 338: {
            SkillPinSi = input.ReadString();
            break;
          }
          case 346: {
            SkillSiWang = input.ReadString();
            break;
          }
          case 354: {
            SkillBiDu = input.ReadString();
            break;
          }
          case 362: {
            SkillWuAdd = input.ReadString();
            break;
          }
          case 370: {
            SkillWuSub = input.ReadString();
            break;
          }
          case 378: {
            SkillFangAdd = input.ReadString();
            break;
          }
          case 386: {
            SkillFangSub = input.ReadString();
            break;
          }
          case 394: {
            SkillSuAdd = input.ReadString();
            break;
          }
          case 402: {
            SkillSuSub = input.ReadString();
            break;
          }
          case 410: {
            SkillYunAdd = input.ReadString();
            break;
          }
          case 418: {
            SkillYunSub = input.ReadString();
            break;
          }
          case 426: {
            SkillEffectJing = input.ReadString();
            break;
          }
          case 434: {
            SkillEffectQi = input.ReadString();
            break;
          }
          case 442: {
            SkillEffectShen = input.ReadString();
            break;
          }
          case 450: {
            SkillEffectWu = input.ReadString();
            break;
          }
          case 458: {
            SkillEffectFang = input.ReadString();
            break;
          }
          case 466: {
            SkillEffectSu = input.ReadString();
            break;
          }
          case 474: {
            SkillEffectYun = input.ReadString();
            break;
          }
          case 482: {
            SkillEffectShui = input.ReadString();
            break;
          }
          case 490: {
            SkillEffectHuo = input.ReadString();
            break;
          }
          case 498: {
            SkillEffectFeng = input.ReadString();
            break;
          }
          case 506: {
            SkillEffectLei = input.ReadString();
            break;
          }
          case 514: {
            SkillEffectTu = input.ReadString();
            break;
          }
          case 522: {
            SkillLevel1NeedNum = input.ReadString();
            break;
          }
          case 530: {
            SkillLevel2NeedNum = input.ReadString();
            break;
          }
          case 538: {
            SkillLevel3NeedNum = input.ReadString();
            break;
          }
          case 546: {
            SkillLevel4NeedNum = input.ReadString();
            break;
          }
          case 554: {
            SkillAndID1 = input.ReadString();
            break;
          }
          case 562: {
            SkillAndID2 = input.ReadString();
            break;
          }
          case 570: {
            SkillAndID3 = input.ReadString();
            break;
          }
          case 578: {
            SkillAndLevel1 = input.ReadString();
            break;
          }
          case 586: {
            SkillAndLevel2 = input.ReadString();
            break;
          }
          case 594: {
            SkillAndLevel3 = input.ReadString();
            break;
          }
          case 602: {
            SkillComboLevel1 = input.ReadString();
            break;
          }
          case 610: {
            SkillComboLevel2 = input.ReadString();
            break;
          }
          case 618: {
            SkillComboLevel3 = input.ReadString();
            break;
          }
          case 626: {
            SkillManLv1 = input.ReadString();
            break;
          }
          case 634: {
            SkillManLv2 = input.ReadString();
            break;
          }
          case 642: {
            SkillManLv3 = input.ReadString();
            break;
          }
          case 650: {
            SkillComboID1 = input.ReadString();
            break;
          }
          case 658: {
            SkillComboID2 = input.ReadString();
            break;
          }
          case 666: {
            SkillComboID3 = input.ReadString();
            break;
          }
          case 674: {
            SkillAddLvID = input.ReadString();
            break;
          }
          case 682: {
            SkillAddRoleLv = input.ReadString();
            break;
          }
          case 690: {
            SkillNeedLv = input.ReadString();
            break;
          }
          case 698: {
            SkillIsUseAll = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskInfo : pb::IMessage<TaskInfo> {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo(TaskInfo other) : this() {
      id_ = other.id_;
      nextId_ = other.nextId_;
      taskType_ = other.taskType_;
      taskName_ = other.taskName_;
      taskIcon_ = other.taskIcon_;
      taskDesc_ = other.taskDesc_;
      taskCostItem_ = other.taskCostItem_;
      taskGetItem_ = other.taskGetItem_;
      taskMapId_ = other.taskMapId_;
      taskNpcTalk_ = other.taskNpcTalk_;
      taskNpcId_ = other.taskNpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo Clone() {
      return new TaskInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextId" field.</summary>
    public const int NextIdFieldNumber = 2;
    private int nextId_;
    /// <summary>
    ///  下一任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextId {
      get { return nextId_; }
      set {
        nextId_ = value;
      }
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 3;
    private int taskType_;
    /// <summary>
    ///  任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "taskName" field.</summary>
    public const int TaskNameFieldNumber = 4;
    private string taskName_ = "";
    /// <summary>
    ///  任务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskName {
      get { return taskName_; }
      set {
        taskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskIcon" field.</summary>
    public const int TaskIconFieldNumber = 5;
    private string taskIcon_ = "";
    /// <summary>
    ///  任务图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskIcon {
      get { return taskIcon_; }
      set {
        taskIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskDesc" field.</summary>
    public const int TaskDescFieldNumber = 6;
    private string taskDesc_ = "";
    /// <summary>
    ///  任务描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskDesc {
      get { return taskDesc_; }
      set {
        taskDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskCostItem" field.</summary>
    public const int TaskCostItemFieldNumber = 7;
    private string taskCostItem_ = "";
    /// <summary>
    ///  任务消耗道具信息（道具id以及数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskCostItem {
      get { return taskCostItem_; }
      set {
        taskCostItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskGetItem" field.</summary>
    public const int TaskGetItemFieldNumber = 8;
    private string taskGetItem_ = "";
    /// <summary>
    ///  任务可获取道具信息（道具id以及数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskGetItem {
      get { return taskGetItem_; }
      set {
        taskGetItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskMapId" field.</summary>
    public const int TaskMapIdFieldNumber = 9;
    private int taskMapId_;
    /// <summary>
    ///  任务需要去的副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskMapId {
      get { return taskMapId_; }
      set {
        taskMapId_ = value;
      }
    }

    /// <summary>Field number for the "taskNpcTalk" field.</summary>
    public const int TaskNpcTalkFieldNumber = 10;
    private string taskNpcTalk_ = "";
    /// <summary>
    ///  对话信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskNpcTalk {
      get { return taskNpcTalk_; }
      set {
        taskNpcTalk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskNpcId" field.</summary>
    public const int TaskNpcIdFieldNumber = 11;
    private int taskNpcId_;
    /// <summary>
    ///  对话对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskNpcId {
      get { return taskNpcId_; }
      set {
        taskNpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NextId != other.NextId) return false;
      if (TaskType != other.TaskType) return false;
      if (TaskName != other.TaskName) return false;
      if (TaskIcon != other.TaskIcon) return false;
      if (TaskDesc != other.TaskDesc) return false;
      if (TaskCostItem != other.TaskCostItem) return false;
      if (TaskGetItem != other.TaskGetItem) return false;
      if (TaskMapId != other.TaskMapId) return false;
      if (TaskNpcTalk != other.TaskNpcTalk) return false;
      if (TaskNpcId != other.TaskNpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (NextId != 0) hash ^= NextId.GetHashCode();
      if (TaskType != 0) hash ^= TaskType.GetHashCode();
      if (TaskName.Length != 0) hash ^= TaskName.GetHashCode();
      if (TaskIcon.Length != 0) hash ^= TaskIcon.GetHashCode();
      if (TaskDesc.Length != 0) hash ^= TaskDesc.GetHashCode();
      if (TaskCostItem.Length != 0) hash ^= TaskCostItem.GetHashCode();
      if (TaskGetItem.Length != 0) hash ^= TaskGetItem.GetHashCode();
      if (TaskMapId != 0) hash ^= TaskMapId.GetHashCode();
      if (TaskNpcTalk.Length != 0) hash ^= TaskNpcTalk.GetHashCode();
      if (TaskNpcId != 0) hash ^= TaskNpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (NextId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextId);
      }
      if (TaskType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TaskType);
      }
      if (TaskName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TaskName);
      }
      if (TaskIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TaskIcon);
      }
      if (TaskDesc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TaskDesc);
      }
      if (TaskCostItem.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TaskCostItem);
      }
      if (TaskGetItem.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TaskGetItem);
      }
      if (TaskMapId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TaskMapId);
      }
      if (TaskNpcTalk.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TaskNpcTalk);
      }
      if (TaskNpcId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TaskNpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (NextId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextId);
      }
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
      }
      if (TaskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskName);
      }
      if (TaskIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskIcon);
      }
      if (TaskDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskDesc);
      }
      if (TaskCostItem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskCostItem);
      }
      if (TaskGetItem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskGetItem);
      }
      if (TaskMapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskMapId);
      }
      if (TaskNpcTalk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskNpcTalk);
      }
      if (TaskNpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskNpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.NextId != 0) {
        NextId = other.NextId;
      }
      if (other.TaskType != 0) {
        TaskType = other.TaskType;
      }
      if (other.TaskName.Length != 0) {
        TaskName = other.TaskName;
      }
      if (other.TaskIcon.Length != 0) {
        TaskIcon = other.TaskIcon;
      }
      if (other.TaskDesc.Length != 0) {
        TaskDesc = other.TaskDesc;
      }
      if (other.TaskCostItem.Length != 0) {
        TaskCostItem = other.TaskCostItem;
      }
      if (other.TaskGetItem.Length != 0) {
        TaskGetItem = other.TaskGetItem;
      }
      if (other.TaskMapId != 0) {
        TaskMapId = other.TaskMapId;
      }
      if (other.TaskNpcTalk.Length != 0) {
        TaskNpcTalk = other.TaskNpcTalk;
      }
      if (other.TaskNpcId != 0) {
        TaskNpcId = other.TaskNpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            NextId = input.ReadInt32();
            break;
          }
          case 24: {
            TaskType = input.ReadInt32();
            break;
          }
          case 34: {
            TaskName = input.ReadString();
            break;
          }
          case 42: {
            TaskIcon = input.ReadString();
            break;
          }
          case 50: {
            TaskDesc = input.ReadString();
            break;
          }
          case 58: {
            TaskCostItem = input.ReadString();
            break;
          }
          case 66: {
            TaskGetItem = input.ReadString();
            break;
          }
          case 72: {
            TaskMapId = input.ReadInt32();
            break;
          }
          case 82: {
            TaskNpcTalk = input.ReadString();
            break;
          }
          case 88: {
            TaskNpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tables : pb::IMessage<tables> {
    private static readonly pb::MessageParser<tables> _parser = new pb::MessageParser<tables>(() => new tables());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tables> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Table.TablesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tables() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tables(tables other) : this() {
      aiTable_ = other.aiTable_.Clone();
      audioTable_ = other.audioTable_.Clone();
      basePropertyTable_ = other.basePropertyTable_.Clone();
      battleActionTable_ = other.battleActionTable_.Clone();
      battleLevelTable_ = other.battleLevelTable_.Clone();
      dialogueTable_ = other.dialogueTable_.Clone();
      dToDTable_ = other.dToDTable_.Clone();
      equipTable_ = other.equipTable_.Clone();
      fxTable_ = other.fxTable_.Clone();
      guideTable_ = other.guideTable_.Clone();
      heroTable_ = other.heroTable_.Clone();
      hostTable_ = other.hostTable_.Clone();
      itemTable_ = other.itemTable_.Clone();
      languageTable_ = other.languageTable_.Clone();
      localLanguageTable_ = other.localLanguageTable_.Clone();
      miscTable_ = other.miscTable_.Clone();
      modelTable_ = other.modelTable_.Clone();
      movieTable_ = other.movieTable_.Clone();
      openFunctionTable_ = other.openFunctionTable_.Clone();
      shopGoodsTable_ = other.shopGoodsTable_.Clone();
      shopTable_ = other.shopTable_.Clone();
      skillTable_ = other.skillTable_.Clone();
      taskTable_ = other.taskTable_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tables Clone() {
      return new tables(this);
    }

    /// <summary>Field number for the "AiTable" field.</summary>
    public const int AiTableFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Table.AiInfo> _repeated_aiTable_codec
        = pb::FieldCodec.ForMessage(10, global::Table.AiInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.AiInfo> aiTable_ = new pbc::RepeatedField<global::Table.AiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.AiInfo> AiTable {
      get { return aiTable_; }
    }

    /// <summary>Field number for the "AudioTable" field.</summary>
    public const int AudioTableFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Table.AudioInfo> _repeated_audioTable_codec
        = pb::FieldCodec.ForMessage(18, global::Table.AudioInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.AudioInfo> audioTable_ = new pbc::RepeatedField<global::Table.AudioInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.AudioInfo> AudioTable {
      get { return audioTable_; }
    }

    /// <summary>Field number for the "BasePropertyTable" field.</summary>
    public const int BasePropertyTableFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Table.BasePropertyInfo> _repeated_basePropertyTable_codec
        = pb::FieldCodec.ForMessage(26, global::Table.BasePropertyInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.BasePropertyInfo> basePropertyTable_ = new pbc::RepeatedField<global::Table.BasePropertyInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.BasePropertyInfo> BasePropertyTable {
      get { return basePropertyTable_; }
    }

    /// <summary>Field number for the "BattleActionTable" field.</summary>
    public const int BattleActionTableFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Table.BattleActionInfo> _repeated_battleActionTable_codec
        = pb::FieldCodec.ForMessage(34, global::Table.BattleActionInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.BattleActionInfo> battleActionTable_ = new pbc::RepeatedField<global::Table.BattleActionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.BattleActionInfo> BattleActionTable {
      get { return battleActionTable_; }
    }

    /// <summary>Field number for the "BattleLevelTable" field.</summary>
    public const int BattleLevelTableFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Table.BattleLevelInfo> _repeated_battleLevelTable_codec
        = pb::FieldCodec.ForMessage(42, global::Table.BattleLevelInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.BattleLevelInfo> battleLevelTable_ = new pbc::RepeatedField<global::Table.BattleLevelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.BattleLevelInfo> BattleLevelTable {
      get { return battleLevelTable_; }
    }

    /// <summary>Field number for the "DialogueTable" field.</summary>
    public const int DialogueTableFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Table.DialogueInfo> _repeated_dialogueTable_codec
        = pb::FieldCodec.ForMessage(50, global::Table.DialogueInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.DialogueInfo> dialogueTable_ = new pbc::RepeatedField<global::Table.DialogueInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.DialogueInfo> DialogueTable {
      get { return dialogueTable_; }
    }

    /// <summary>Field number for the "DToDTable" field.</summary>
    public const int DToDTableFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Table.DToDInfo> _repeated_dToDTable_codec
        = pb::FieldCodec.ForMessage(58, global::Table.DToDInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.DToDInfo> dToDTable_ = new pbc::RepeatedField<global::Table.DToDInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.DToDInfo> DToDTable {
      get { return dToDTable_; }
    }

    /// <summary>Field number for the "EquipTable" field.</summary>
    public const int EquipTableFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Table.EquipInfo> _repeated_equipTable_codec
        = pb::FieldCodec.ForMessage(66, global::Table.EquipInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.EquipInfo> equipTable_ = new pbc::RepeatedField<global::Table.EquipInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.EquipInfo> EquipTable {
      get { return equipTable_; }
    }

    /// <summary>Field number for the "FxTable" field.</summary>
    public const int FxTableFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Table.FxInfo> _repeated_fxTable_codec
        = pb::FieldCodec.ForMessage(74, global::Table.FxInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.FxInfo> fxTable_ = new pbc::RepeatedField<global::Table.FxInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.FxInfo> FxTable {
      get { return fxTable_; }
    }

    /// <summary>Field number for the "GuideTable" field.</summary>
    public const int GuideTableFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Table.GuideInfo> _repeated_guideTable_codec
        = pb::FieldCodec.ForMessage(82, global::Table.GuideInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.GuideInfo> guideTable_ = new pbc::RepeatedField<global::Table.GuideInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.GuideInfo> GuideTable {
      get { return guideTable_; }
    }

    /// <summary>Field number for the "HeroTable" field.</summary>
    public const int HeroTableFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Table.HeroInfo> _repeated_heroTable_codec
        = pb::FieldCodec.ForMessage(90, global::Table.HeroInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.HeroInfo> heroTable_ = new pbc::RepeatedField<global::Table.HeroInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.HeroInfo> HeroTable {
      get { return heroTable_; }
    }

    /// <summary>Field number for the "HostTable" field.</summary>
    public const int HostTableFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Table.HostInfo> _repeated_hostTable_codec
        = pb::FieldCodec.ForMessage(98, global::Table.HostInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.HostInfo> hostTable_ = new pbc::RepeatedField<global::Table.HostInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.HostInfo> HostTable {
      get { return hostTable_; }
    }

    /// <summary>Field number for the "ItemTable" field.</summary>
    public const int ItemTableFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Table.ItemInfo> _repeated_itemTable_codec
        = pb::FieldCodec.ForMessage(106, global::Table.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.ItemInfo> itemTable_ = new pbc::RepeatedField<global::Table.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.ItemInfo> ItemTable {
      get { return itemTable_; }
    }

    /// <summary>Field number for the "LanguageTable" field.</summary>
    public const int LanguageTableFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Table.LanguageInfo> _repeated_languageTable_codec
        = pb::FieldCodec.ForMessage(114, global::Table.LanguageInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.LanguageInfo> languageTable_ = new pbc::RepeatedField<global::Table.LanguageInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.LanguageInfo> LanguageTable {
      get { return languageTable_; }
    }

    /// <summary>Field number for the "LocalLanguageTable" field.</summary>
    public const int LocalLanguageTableFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Table.LocalLanguageInfo> _repeated_localLanguageTable_codec
        = pb::FieldCodec.ForMessage(122, global::Table.LocalLanguageInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.LocalLanguageInfo> localLanguageTable_ = new pbc::RepeatedField<global::Table.LocalLanguageInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.LocalLanguageInfo> LocalLanguageTable {
      get { return localLanguageTable_; }
    }

    /// <summary>Field number for the "MiscTable" field.</summary>
    public const int MiscTableFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Table.MiscInfo> _repeated_miscTable_codec
        = pb::FieldCodec.ForMessage(130, global::Table.MiscInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.MiscInfo> miscTable_ = new pbc::RepeatedField<global::Table.MiscInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.MiscInfo> MiscTable {
      get { return miscTable_; }
    }

    /// <summary>Field number for the "ModelTable" field.</summary>
    public const int ModelTableFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Table.ModelInfo> _repeated_modelTable_codec
        = pb::FieldCodec.ForMessage(138, global::Table.ModelInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.ModelInfo> modelTable_ = new pbc::RepeatedField<global::Table.ModelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.ModelInfo> ModelTable {
      get { return modelTable_; }
    }

    /// <summary>Field number for the "MovieTable" field.</summary>
    public const int MovieTableFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Table.MovieInfo> _repeated_movieTable_codec
        = pb::FieldCodec.ForMessage(146, global::Table.MovieInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.MovieInfo> movieTable_ = new pbc::RepeatedField<global::Table.MovieInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.MovieInfo> MovieTable {
      get { return movieTable_; }
    }

    /// <summary>Field number for the "OpenFunctionTable" field.</summary>
    public const int OpenFunctionTableFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Table.OpenFunctionInfo> _repeated_openFunctionTable_codec
        = pb::FieldCodec.ForMessage(154, global::Table.OpenFunctionInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.OpenFunctionInfo> openFunctionTable_ = new pbc::RepeatedField<global::Table.OpenFunctionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.OpenFunctionInfo> OpenFunctionTable {
      get { return openFunctionTable_; }
    }

    /// <summary>Field number for the "ShopGoodsTable" field.</summary>
    public const int ShopGoodsTableFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Table.ShopGoodsInfo> _repeated_shopGoodsTable_codec
        = pb::FieldCodec.ForMessage(162, global::Table.ShopGoodsInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.ShopGoodsInfo> shopGoodsTable_ = new pbc::RepeatedField<global::Table.ShopGoodsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.ShopGoodsInfo> ShopGoodsTable {
      get { return shopGoodsTable_; }
    }

    /// <summary>Field number for the "ShopTable" field.</summary>
    public const int ShopTableFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Table.ShopInfo> _repeated_shopTable_codec
        = pb::FieldCodec.ForMessage(170, global::Table.ShopInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.ShopInfo> shopTable_ = new pbc::RepeatedField<global::Table.ShopInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.ShopInfo> ShopTable {
      get { return shopTable_; }
    }

    /// <summary>Field number for the "SkillTable" field.</summary>
    public const int SkillTableFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Table.SkillInfo> _repeated_skillTable_codec
        = pb::FieldCodec.ForMessage(178, global::Table.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.SkillInfo> skillTable_ = new pbc::RepeatedField<global::Table.SkillInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.SkillInfo> SkillTable {
      get { return skillTable_; }
    }

    /// <summary>Field number for the "TaskTable" field.</summary>
    public const int TaskTableFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Table.TaskInfo> _repeated_taskTable_codec
        = pb::FieldCodec.ForMessage(186, global::Table.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Table.TaskInfo> taskTable_ = new pbc::RepeatedField<global::Table.TaskInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Table.TaskInfo> TaskTable {
      get { return taskTable_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tables);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tables other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aiTable_.Equals(other.aiTable_)) return false;
      if(!audioTable_.Equals(other.audioTable_)) return false;
      if(!basePropertyTable_.Equals(other.basePropertyTable_)) return false;
      if(!battleActionTable_.Equals(other.battleActionTable_)) return false;
      if(!battleLevelTable_.Equals(other.battleLevelTable_)) return false;
      if(!dialogueTable_.Equals(other.dialogueTable_)) return false;
      if(!dToDTable_.Equals(other.dToDTable_)) return false;
      if(!equipTable_.Equals(other.equipTable_)) return false;
      if(!fxTable_.Equals(other.fxTable_)) return false;
      if(!guideTable_.Equals(other.guideTable_)) return false;
      if(!heroTable_.Equals(other.heroTable_)) return false;
      if(!hostTable_.Equals(other.hostTable_)) return false;
      if(!itemTable_.Equals(other.itemTable_)) return false;
      if(!languageTable_.Equals(other.languageTable_)) return false;
      if(!localLanguageTable_.Equals(other.localLanguageTable_)) return false;
      if(!miscTable_.Equals(other.miscTable_)) return false;
      if(!modelTable_.Equals(other.modelTable_)) return false;
      if(!movieTable_.Equals(other.movieTable_)) return false;
      if(!openFunctionTable_.Equals(other.openFunctionTable_)) return false;
      if(!shopGoodsTable_.Equals(other.shopGoodsTable_)) return false;
      if(!shopTable_.Equals(other.shopTable_)) return false;
      if(!skillTable_.Equals(other.skillTable_)) return false;
      if(!taskTable_.Equals(other.taskTable_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aiTable_.GetHashCode();
      hash ^= audioTable_.GetHashCode();
      hash ^= basePropertyTable_.GetHashCode();
      hash ^= battleActionTable_.GetHashCode();
      hash ^= battleLevelTable_.GetHashCode();
      hash ^= dialogueTable_.GetHashCode();
      hash ^= dToDTable_.GetHashCode();
      hash ^= equipTable_.GetHashCode();
      hash ^= fxTable_.GetHashCode();
      hash ^= guideTable_.GetHashCode();
      hash ^= heroTable_.GetHashCode();
      hash ^= hostTable_.GetHashCode();
      hash ^= itemTable_.GetHashCode();
      hash ^= languageTable_.GetHashCode();
      hash ^= localLanguageTable_.GetHashCode();
      hash ^= miscTable_.GetHashCode();
      hash ^= modelTable_.GetHashCode();
      hash ^= movieTable_.GetHashCode();
      hash ^= openFunctionTable_.GetHashCode();
      hash ^= shopGoodsTable_.GetHashCode();
      hash ^= shopTable_.GetHashCode();
      hash ^= skillTable_.GetHashCode();
      hash ^= taskTable_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aiTable_.WriteTo(output, _repeated_aiTable_codec);
      audioTable_.WriteTo(output, _repeated_audioTable_codec);
      basePropertyTable_.WriteTo(output, _repeated_basePropertyTable_codec);
      battleActionTable_.WriteTo(output, _repeated_battleActionTable_codec);
      battleLevelTable_.WriteTo(output, _repeated_battleLevelTable_codec);
      dialogueTable_.WriteTo(output, _repeated_dialogueTable_codec);
      dToDTable_.WriteTo(output, _repeated_dToDTable_codec);
      equipTable_.WriteTo(output, _repeated_equipTable_codec);
      fxTable_.WriteTo(output, _repeated_fxTable_codec);
      guideTable_.WriteTo(output, _repeated_guideTable_codec);
      heroTable_.WriteTo(output, _repeated_heroTable_codec);
      hostTable_.WriteTo(output, _repeated_hostTable_codec);
      itemTable_.WriteTo(output, _repeated_itemTable_codec);
      languageTable_.WriteTo(output, _repeated_languageTable_codec);
      localLanguageTable_.WriteTo(output, _repeated_localLanguageTable_codec);
      miscTable_.WriteTo(output, _repeated_miscTable_codec);
      modelTable_.WriteTo(output, _repeated_modelTable_codec);
      movieTable_.WriteTo(output, _repeated_movieTable_codec);
      openFunctionTable_.WriteTo(output, _repeated_openFunctionTable_codec);
      shopGoodsTable_.WriteTo(output, _repeated_shopGoodsTable_codec);
      shopTable_.WriteTo(output, _repeated_shopTable_codec);
      skillTable_.WriteTo(output, _repeated_skillTable_codec);
      taskTable_.WriteTo(output, _repeated_taskTable_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aiTable_.CalculateSize(_repeated_aiTable_codec);
      size += audioTable_.CalculateSize(_repeated_audioTable_codec);
      size += basePropertyTable_.CalculateSize(_repeated_basePropertyTable_codec);
      size += battleActionTable_.CalculateSize(_repeated_battleActionTable_codec);
      size += battleLevelTable_.CalculateSize(_repeated_battleLevelTable_codec);
      size += dialogueTable_.CalculateSize(_repeated_dialogueTable_codec);
      size += dToDTable_.CalculateSize(_repeated_dToDTable_codec);
      size += equipTable_.CalculateSize(_repeated_equipTable_codec);
      size += fxTable_.CalculateSize(_repeated_fxTable_codec);
      size += guideTable_.CalculateSize(_repeated_guideTable_codec);
      size += heroTable_.CalculateSize(_repeated_heroTable_codec);
      size += hostTable_.CalculateSize(_repeated_hostTable_codec);
      size += itemTable_.CalculateSize(_repeated_itemTable_codec);
      size += languageTable_.CalculateSize(_repeated_languageTable_codec);
      size += localLanguageTable_.CalculateSize(_repeated_localLanguageTable_codec);
      size += miscTable_.CalculateSize(_repeated_miscTable_codec);
      size += modelTable_.CalculateSize(_repeated_modelTable_codec);
      size += movieTable_.CalculateSize(_repeated_movieTable_codec);
      size += openFunctionTable_.CalculateSize(_repeated_openFunctionTable_codec);
      size += shopGoodsTable_.CalculateSize(_repeated_shopGoodsTable_codec);
      size += shopTable_.CalculateSize(_repeated_shopTable_codec);
      size += skillTable_.CalculateSize(_repeated_skillTable_codec);
      size += taskTable_.CalculateSize(_repeated_taskTable_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tables other) {
      if (other == null) {
        return;
      }
      aiTable_.Add(other.aiTable_);
      audioTable_.Add(other.audioTable_);
      basePropertyTable_.Add(other.basePropertyTable_);
      battleActionTable_.Add(other.battleActionTable_);
      battleLevelTable_.Add(other.battleLevelTable_);
      dialogueTable_.Add(other.dialogueTable_);
      dToDTable_.Add(other.dToDTable_);
      equipTable_.Add(other.equipTable_);
      fxTable_.Add(other.fxTable_);
      guideTable_.Add(other.guideTable_);
      heroTable_.Add(other.heroTable_);
      hostTable_.Add(other.hostTable_);
      itemTable_.Add(other.itemTable_);
      languageTable_.Add(other.languageTable_);
      localLanguageTable_.Add(other.localLanguageTable_);
      miscTable_.Add(other.miscTable_);
      modelTable_.Add(other.modelTable_);
      movieTable_.Add(other.movieTable_);
      openFunctionTable_.Add(other.openFunctionTable_);
      shopGoodsTable_.Add(other.shopGoodsTable_);
      shopTable_.Add(other.shopTable_);
      skillTable_.Add(other.skillTable_);
      taskTable_.Add(other.taskTable_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            aiTable_.AddEntriesFrom(input, _repeated_aiTable_codec);
            break;
          }
          case 18: {
            audioTable_.AddEntriesFrom(input, _repeated_audioTable_codec);
            break;
          }
          case 26: {
            basePropertyTable_.AddEntriesFrom(input, _repeated_basePropertyTable_codec);
            break;
          }
          case 34: {
            battleActionTable_.AddEntriesFrom(input, _repeated_battleActionTable_codec);
            break;
          }
          case 42: {
            battleLevelTable_.AddEntriesFrom(input, _repeated_battleLevelTable_codec);
            break;
          }
          case 50: {
            dialogueTable_.AddEntriesFrom(input, _repeated_dialogueTable_codec);
            break;
          }
          case 58: {
            dToDTable_.AddEntriesFrom(input, _repeated_dToDTable_codec);
            break;
          }
          case 66: {
            equipTable_.AddEntriesFrom(input, _repeated_equipTable_codec);
            break;
          }
          case 74: {
            fxTable_.AddEntriesFrom(input, _repeated_fxTable_codec);
            break;
          }
          case 82: {
            guideTable_.AddEntriesFrom(input, _repeated_guideTable_codec);
            break;
          }
          case 90: {
            heroTable_.AddEntriesFrom(input, _repeated_heroTable_codec);
            break;
          }
          case 98: {
            hostTable_.AddEntriesFrom(input, _repeated_hostTable_codec);
            break;
          }
          case 106: {
            itemTable_.AddEntriesFrom(input, _repeated_itemTable_codec);
            break;
          }
          case 114: {
            languageTable_.AddEntriesFrom(input, _repeated_languageTable_codec);
            break;
          }
          case 122: {
            localLanguageTable_.AddEntriesFrom(input, _repeated_localLanguageTable_codec);
            break;
          }
          case 130: {
            miscTable_.AddEntriesFrom(input, _repeated_miscTable_codec);
            break;
          }
          case 138: {
            modelTable_.AddEntriesFrom(input, _repeated_modelTable_codec);
            break;
          }
          case 146: {
            movieTable_.AddEntriesFrom(input, _repeated_movieTable_codec);
            break;
          }
          case 154: {
            openFunctionTable_.AddEntriesFrom(input, _repeated_openFunctionTable_codec);
            break;
          }
          case 162: {
            shopGoodsTable_.AddEntriesFrom(input, _repeated_shopGoodsTable_codec);
            break;
          }
          case 170: {
            shopTable_.AddEntriesFrom(input, _repeated_shopTable_codec);
            break;
          }
          case 178: {
            skillTable_.AddEntriesFrom(input, _repeated_skillTable_codec);
            break;
          }
          case 186: {
            taskTable_.AddEntriesFrom(input, _repeated_taskTable_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
